"""
Python SDK for OpenFGA

API version: 1.x
Website: https://openfga.dev
Documentation: https://openfga.dev/docs
Support: https://openfga.dev/community
License: [Apache-2.0](https://github.com/openfga/python-sdk/blob/main/LICENSE)

NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
"""

import copy

from unittest.mock import Mock

import pytest

from openfga_sdk.configuration import Configuration, RetryParams
from openfga_sdk.exceptions import FgaValidationException


@pytest.fixture
def configuration():
    yield Configuration(api_url="https://api.fga.example")


class TestConfigurationProperties:
    def test_configuration_api_url(self, configuration: Configuration):
        assert configuration.api_url == "https://api.fga.example"

        with pytest.raises(FgaValidationException):
            configuration.api_url = "https://fga.example/api"

        configuration.api_url = "https://fga.example"
        assert configuration.api_url == "https://fga.example"

    def test_configuration_store_id(self, configuration: Configuration):
        assert configuration.store_id is None

        configuration.store_id = "01YCP46JKYM8FJCQ37NMBYHE5X"
        assert configuration.store_id == "01YCP46JKYM8FJCQ37NMBYHE5X"

    def test_configuration_credentials(self, configuration: Configuration):
        assert configuration.credentials is None

        credentials_mock = Mock()
        configuration.credentials = credentials_mock
        assert configuration.credentials == credentials_mock


class TestConfigurationRetryParams:
    def test_configuration_retry_params_default_values(
        self, configuration: Configuration
    ):
        assert configuration.retry_params.max_retries == 3  # 5
        assert configuration.retry_params.min_wait_in_ms == 100  # 10

    def test_configuration_retry_params_custom_values(
        self, configuration: Configuration
    ):
        retry_params = RetryParams(max_retries=10, min_wait_in_ms=50)
        configuration.retry_params = retry_params
        assert configuration.retry_params.max_retries == 10
        assert configuration.retry_params.min_wait_in_ms == 50

    def test_configuration_retry_params_invalid_max_retry(
        self, configuration: Configuration
    ):
        with pytest.raises(FgaValidationException):
            configuration.retry_params.max_retries = -1

    def test_configuration_retry_params_max_retry_greater_than_max(
        self, configuration: Configuration
    ):
        with pytest.raises(FgaValidationException):
            configuration.retry_params.max_retries = 20

    def test_configuration_retry_params_invalid_min_wait_in_ms(
        self, configuration: Configuration
    ):
        with pytest.raises(FgaValidationException):
            configuration.retry_params.min_wait_in_ms = -1


class TestConfigurationValidityChecks:
    def test_configuration_is_valid_invalid_store_id(
        self, configuration: Configuration
    ):
        configuration.api_url = "https://fga.example"

        with pytest.raises(FgaValidationException):
            configuration.store_id = "invalid_ulid"

    def test_configuration_is_valid(self, configuration: Configuration):
        configuration.api_url = "https://fga.example"
        configuration.store_id = "01F9ZCDXDZBXK83WVMY1VZT23V"
        assert configuration.is_valid()


class TestConfigurationLogging:
    def test_configuration_logger_format(self, configuration: Configuration):
        assert configuration.logger_format == "%(asctime)s %(levelname)s %(message)s"
        configuration.logger_format = "%(levelname)s: %(message)s"
        assert configuration.logger_format == "%(levelname)s: %(message)s"

    def test_configuration_debug(self, configuration: Configuration):
        assert not configuration.debug
        configuration.debug = True
        assert configuration.debug
        configuration.debug = False
        assert not configuration.debug

    def test_configuration_logger_file(self, configuration: Configuration):
        assert configuration.logger_file is None
        configuration.logger_file = "debug.log"
        assert configuration.logger_file == "debug.log"


class TestConfigurationMiscellaneous:
    def test_configuration_auth_settings(self, configuration: Configuration):
        assert configuration.auth_settings() == {}

    def test_configuration_to_debug_report(self, configuration: Configuration):
        report = configuration.to_debug_report()
        assert "Python SDK Debug Report" in report
        assert "OS" in report
        assert "Python Version" in report
        assert "Version of the API" in report
        assert "SDK Package Version" in report

    def test_configuration_deepcopy(self, configuration: Configuration):
        # Create a Configuration object with some values
        config = Configuration(
            api_url="https://fga.example",
            store_id="01YCP46JKYM8FJCQ37NMBYHE5X",
            credentials=Mock(
                _client_id="client123",
                _client_secret="secret123",
                _api_audience="audience123",
                _api_issuer="issuer123",
                _api_token="token123",
            ),
            retry_params=RetryParams(max_retries=10, min_wait_in_ms=50),
            api_key={"api_key1": "key1", "api_key2": "key2"},
            api_key_prefix={"api_key1": "Bearer", "api_key2": "Bearer"},
            username="user",
            password="pass",
            discard_unknown_keys=True,
            ssl_ca_cert="/path/to/ca_cert.pem",
            timeout=10000,
        )

        # Perform deep copy
        copied_config = copy.deepcopy(config)

        # Verify all attributes of copied object are equal to original object
        assert copied_config.api_url == config.api_url
        assert copied_config.store_id == config.store_id
        assert copied_config.api_key == config.api_key
        assert copied_config.api_key_prefix == config.api_key_prefix
        assert copied_config.username == config.username
        assert copied_config.password == config.password
        assert copied_config.discard_unknown_keys == config.discard_unknown_keys
        assert copied_config.ssl_ca_cert == config.ssl_ca_cert
        assert copied_config.timeout == config.timeout
