"""
Python SDK for OpenFGA

API version: 1.x
Website: https://openfga.dev
Documentation: https://openfga.dev/docs
Support: https://openfga.dev/community
License: [Apache-2.0](https://github.com/openfga/python-sdk/blob/main/LICENSE)

NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
"""

from datetime import datetime, timedelta
from unittest.mock import AsyncMock

import json
import pytest
import pytest_asyncio
import urllib3

from openfga_sdk.configuration import Configuration
from openfga_sdk.credentials import CredentialConfiguration, Credentials
from openfga_sdk.exceptions import AuthenticationError
from openfga_sdk.oauth2 import OAuth2Client
from openfga_sdk.rest import RestClientResponse, RestClient
from openfga_sdk.protocols import OAuth2ClientProtocol, RestClientProtocol


def mock_response(body: dict | str, status) -> RestClientResponse:
    body = json.dumps(body) if isinstance(body, dict) else body
    headers = urllib3.response.HTTPHeaderDict({"content-type": "application/json"})
    obj = urllib3.HTTPResponse(body, headers, status, preload_content=False)
    return RestClientResponse(response=obj, data=body, status=status, reason="OK")


@pytest.fixture
def credentials():
    yield Credentials(
        method="client_credentials",
        configuration=CredentialConfiguration(
            client_id="myclientid",
            client_secret="mysecret",
            api_issuer="issuer.fga.example",
            api_audience="myaudience",
        ),
    )


@pytest.fixture
def configuration(credentials):
    yield Configuration(
        api_url="https://api.fga.example",
        credentials=credentials,
    )


@pytest_asyncio.fixture
async def oauth2_client(configuration):
    yield OAuth2Client(
        configuration=configuration,
    )


@pytest_asyncio.fixture
async def rest_client(configuration):
    rest_client = RestClient(
        configuration=configuration,
    )
    yield rest_client
    await rest_client.close()


@pytest.mark.asyncio
class TestAsyncOAuth2Client:
    async def test_get_authentication_valid_client_credentials(
        self,
        rest_client: RestClientProtocol,
        oauth2_client: OAuth2ClientProtocol,
    ):
        oauth2_client.access_token = "XYZ123"
        oauth2_client.access_expiry_time = datetime.now() + timedelta(seconds=60)

        auth_header = await oauth2_client.get_authentication_header(rest_client)

        assert auth_header.name == "Authorization"
        assert auth_header.value == "Bearer XYZ123"

    async def test_get_authentication_obtain_client_credentials(
        self,
        rest_client,
        oauth2_client,
        mocker,
    ):
        mock_request = mocker.patch.object(
            rest_client,
            "request",
            AsyncMock(
                return_value=mock_response(
                    {"expires_in": 120, "access_token": "AABBCCDD"}, 200
                )
            ),
        )

        current_time = datetime.now()

        auth_header = await oauth2_client.get_authentication_header(rest_client)

        assert auth_header.name == "Authorization"
        assert auth_header.value == "Bearer AABBCCDD"

        assert oauth2_client.access_token == "AABBCCDD"
        assert oauth2_client.access_expiry_time >= current_time + timedelta(seconds=120)

        expected_header = urllib3.response.HTTPHeaderDict(
            {
                "Accept": "application/json",
                "Content-Type": "application/x-www-form-urlencoded",
                "User-Agent": "openfga-sdk (python) 0.9.1",
            }
        )

        mock_request.assert_called_once_with(
            method="POST",
            url="https://issuer.fga.example/oauth/token",
            headers=expected_header,
            post_params={
                "client_id": "myclientid",
                "client_secret": "mysecret",
                "audience": "myaudience",
                "grant_type": "client_credentials",
            },
        )

    async def test_get_authentication_obtain_client_credentials_failed(
        self,
        rest_client,
        oauth2_client,
        mocker,
    ):
        mocker.patch.object(
            rest_client,
            "request",
            return_value=mock_response({"reason": "Unauthorized"}, 403),
            new_callable=AsyncMock,
        )

        with pytest.raises(AuthenticationError):
            await oauth2_client.get_authentication_header(rest_client)

    async def test_get_authentication_obtain_with_expired_client_credentials_failed(
        self,
        rest_client,
        oauth2_client,
        mocker,
    ):
        mocker.patch.object(
            rest_client,
            "request",
            return_value=mock_response({"reason": "Unauthorized"}, 403),
            new_callable=AsyncMock,
        )

        oauth2_client.access_token = "XYZ123"
        oauth2_client.access_expiry_time = datetime.now() - timedelta(seconds=240)

        with pytest.raises(AuthenticationError):
            await oauth2_client.get_authentication_header(rest_client)

    async def test_get_authentication_unexpected_response_fails(
        self,
        mocker,
        rest_client,
        oauth2_client,
    ):
        mocker.patch.object(
            rest_client,
            "request",
            return_value=mock_response("This is not a JSON response", 200),
            new_callable=AsyncMock,
        )

        with pytest.raises(AuthenticationError):
            await oauth2_client.get_authentication_header(rest_client)

    async def test_get_authentication_erroneous_response_fails(
        self,
        rest_client,
        oauth2_client,
        mocker,
    ):
        mocker.patch.object(
            rest_client,
            "request",
            return_value=mock_response({"access_token": "AABBCCDD"}, 200),
            new_callable=AsyncMock,
        )

        with pytest.raises(AuthenticationError):
            await oauth2_client.get_authentication_header(rest_client)

    async def test_get_authentication_retries_5xx_responses(
        self,
        rest_client,
        oauth2_client,
        mocker,
    ):
        error_response = {
            "code": "rate_limit_exceeded",
            "message": "Rate Limit exceeded",
        }

        success_response = {"expires_in": 120, "access_token": "AABBCCDD"}

        side_effect = [
            mock_response(error_response, 429),
            mock_response(error_response, 429),
            mock_response(error_response, 429),
            mock_response(success_response, 200),
        ]

        mock_request = mocker.patch.object(
            rest_client,
            "request",
            side_effect=side_effect,
            new_callable=AsyncMock,
        )

        oauth2_client.configuration.retry_params.max_retries = 5
        oauth2_client.configuration.retry_params.min_wait_in_ms = 0

        auth_header = await oauth2_client.get_authentication_header(rest_client)

        mock_request.assert_called()

        assert mock_request.call_count == 4

        assert auth_header.name == "Authorization"
        assert auth_header.value == "Bearer AABBCCDD"
