"""
Python SDK for OpenFGA

API version: 1.x
Website: https://openfga.dev
Documentation: https://openfga.dev/docs
Support: https://openfga.dev/community
License: [Apache-2.0](https://github.com/openfga/python-sdk/blob/main/LICENSE)

NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
"""

from unittest.mock import AsyncMock, patch

import pytest

from openfga_sdk.common.open_fga_api import ApiResponse
from openfga_sdk.common.options import ReadRequestOptions
from openfga_sdk.models import ReadRequestTupleKey
from openfga_sdk.protocols import ApiResponseProtocol, OpenFgaClientProtocol


@pytest.fixture
def api_request_response() -> ApiResponseProtocol:
    return ApiResponse(
        deserialized=None,
    )


@pytest.fixture
def api_request_conditions(
    api_request_response: ApiResponse,
):
    return {
        "attribute": "read",
        "new": AsyncMock(return_value=api_request_response),
    }


@pytest.mark.asyncio
class TestOpenFgaClientReadAuthorizationModelsEndpoint:
    """
    @covers openfga_sdk.client.OpenFgaClient.read
    """

    async def test_read_issues_request(
        self,
        client: OpenFgaClientProtocol,
        api_request_conditions,
    ):
        """
        Test that the read method issues a request to OpenFgaApi.
        """
        with patch.object(client.api, **api_request_conditions) as api_request:
            await client.read(ReadRequestTupleKey())

            api_request.assert_called_once()

    async def test_read_returns_expected_response(
        self,
        client: OpenFgaClientProtocol,
        api_request_conditions,
    ):
        """
        Test that the read method returns the expected response.
        """
        with patch.object(client.api, **api_request_conditions):
            response = await client.read(ReadRequestTupleKey())

            assert response is None

    async def test_read_returns_full_response(
        self,
        client: OpenFgaClientProtocol,
        api_request_response: ApiResponse,
        api_request_conditions,
    ):
        """
        Test that the read method returns an ApiResponse instance containing the expected response.
        """

        with patch.object(client.api, **api_request_conditions):
            response = await client.read(
                ReadRequestTupleKey(),
                options=ReadRequestOptions(
                    return_response=True,
                ),
            )

            assert response == api_request_response
