"""
Python SDK for OpenFGA

API version: 1.x
Website: https://openfga.dev
Documentation: https://openfga.dev/docs
Support: https://openfga.dev/community
License: [Apache-2.0](https://github.com/openfga/python-sdk/blob/main/LICENSE)

NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
"""

from unittest.mock import AsyncMock, patch

import pytest

from openfga_sdk.common.open_fga_api import ApiResponse
from openfga_sdk.common.options import (
    CreateStoreRequestOptions,
)
from openfga_sdk.models.create_store_request import CreateStoreRequest
from openfga_sdk.models.create_store_response import CreateStoreResponse
from openfga_sdk.protocols import ApiResponseProtocol, OpenFgaClientProtocol


@pytest.fixture
def api_request_response(
    mock_api_response_create_store_deserialized: CreateStoreResponse,
) -> ApiResponseProtocol:
    return ApiResponse(
        deserialized=mock_api_response_create_store_deserialized,
    )


@pytest.fixture
def api_request_conditions(
    api_request_response: ApiResponse,
):
    return {
        "attribute": "create_store",
        "new": AsyncMock(return_value=api_request_response),
    }


@pytest.mark.asyncio
class TestOpenFgaClientCreateStoreEndpoint:
    """
    @covers openfga_sdk.client.OpenFgaClient.create_store
    """

    async def test_create_store_issues_request(
        self,
        client: OpenFgaClientProtocol,
        mock_api_response_create_store,
        api_request_conditions,
    ):
        """
        Test that the create_store method issues a request to OpenFgaApi.
        """
        create_store_body = CreateStoreRequest()

        with patch.object(client.api, **api_request_conditions) as api_request:
            await client.create_store(create_store_body)

            api_request.assert_called_once()

    async def test_create_store_returns_expected_response(
        self,
        client: OpenFgaClientProtocol,
        mock_api_response_create_store_deserialized: CreateStoreResponse,
        mock_api_response_create_store,
        api_request_conditions,
    ):
        """
        Test that the create_store method returns a CreateStoreResponse instance containing the expected response.
        """
        create_store_body = CreateStoreRequest(
            name=mock_api_response_create_store["name"],
        )

        with patch.object(client.api, **api_request_conditions):
            response = await client.create_store(create_store_body)

            assert response == mock_api_response_create_store_deserialized

    async def test_create_store_returns_full_response(
        self,
        client: OpenFgaClientProtocol,
        mock_api_response_create_store,
        api_request_response: ApiResponse,
        api_request_conditions,
    ):
        """
        Test that the create_store method returns an ApiResponse instance containing the expected response.
        """
        options = CreateStoreRequestOptions(
            return_response=True,
        )

        create_store_body = CreateStoreRequest(
            name=mock_api_response_create_store["name"],
        )

        with patch.object(client.api, **api_request_conditions):
            response = await client.create_store(create_store_body, options)

            assert response == api_request_response
