"""
Python SDK for OpenFGA

API version: 1.x
Website: https://openfga.dev
Documentation: https://openfga.dev/docs
Support: https://openfga.dev/community
License: [Apache-2.0](https://github.com/openfga/python-sdk/blob/main/LICENSE)

NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
"""

import uuid

from unittest.mock import AsyncMock, MagicMock, patch

import orjson
import pytest

from openfga_sdk.common.api_client import ApiClientResponse
from openfga_sdk.common.open_fga_api import ApiResponse
from openfga_sdk.common.options import WriteRequestOptions
from openfga_sdk.models.write_request import WriteRequest
from openfga_sdk.protocols import (
    ApiClientResponseProtocol,
    ApiResponseProtocol,
    OpenFgaApiProtocol,
    RestClientResponseProtocol,
)
from openfga_sdk.rest import RestClientResponse


@pytest.fixture
def rest_client_response() -> RestClientResponseProtocol:
    mock_response = MagicMock()
    mock_response.status = 200

    return RestClientResponse(
        response=mock_response,
        data="",
        status=200,
        reason="OK",
    )


@pytest.fixture
def api_client_response(
    rest_client_response,
) -> ApiClientResponseProtocol:
    return ApiClientResponse(response=rest_client_response)


@pytest.fixture
def expected_response(
    api_client_response,
) -> ApiResponseProtocol:
    response: ApiResponseProtocol = ApiResponse() | api_client_response
    response.deserialized = None
    return response


@pytest.fixture
def api_client_request_conditions(
    api_client_response: ApiClientResponseProtocol,
):
    return {
        "attribute": "request",
        "new": AsyncMock(return_value=api_client_response),
    }


@pytest.mark.asyncio
class TestOpenFgaApiWriteEndpoint:
    """
    @covers openfga_sdk.api.open_fga_api.OpenFgaApi.write.
    """

    async def test_write_issues_request(
        self,
        api: OpenFgaApiProtocol,
        api_client_request_conditions,
    ):
        """
        Test that the write method issues a request to ApiClient.
        """
        options = WriteRequestOptions(
            store_id=str(uuid.uuid4()),
        )

        with patch.object(
            api.api_client, **api_client_request_conditions
        ) as api_request:
            await api.write(WriteRequest(), options)

            api_request.assert_called_once()

    async def test_write_returns_expected_response(
        self,
        api: OpenFgaApiProtocol,
        expected_response: ApiResponseProtocol,
        api_client_request_conditions,
    ):
        """
        Test that the write method returns an ApiClientResponse instance containing the expected response.
        """
        options = WriteRequestOptions(
            store_id=str(uuid.uuid4()),
        )

        with patch.object(api.api_client, **api_client_request_conditions):
            response = await api.write(WriteRequest(), options)

            assert response == expected_response
