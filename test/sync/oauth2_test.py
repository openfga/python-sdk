"""
Python SDK for OpenFGA

API version: 1.x
Website: https://openfga.dev
Documentation: https://openfga.dev/docs
Support: https://openfga.dev/community
License: [Apache-2.0](https://github.com/openfga/python-sdk/blob/main/LICENSE)

NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
"""

from datetime import datetime, timedelta

import json
import pytest
import urllib3

from openfga_sdk.configuration import Configuration
from openfga_sdk.credentials import CredentialConfiguration, Credentials
from openfga_sdk.exceptions import AuthenticationError
from openfga_sdk.sync.oauth2 import OAuth2Client
from openfga_sdk.sync.rest import RestClientResponse, RestClient


def mock_response(body: dict | str, status) -> RestClientResponse:
    body = json.dumps(body) if isinstance(body, dict) else body
    headers = urllib3.response.HTTPHeaderDict({"content-type": "application/json"})
    obj = urllib3.HTTPResponse(body, headers, status)
    return RestClientResponse(
        response=obj,
        data=body,
        status=status,
    )


@pytest.fixture
def credentials():
    yield Credentials(
        method="client_credentials",
        configuration=CredentialConfiguration(
            client_id="myclientid",
            client_secret="mysecret",
            api_issuer="issuer.fga.example",
            api_audience="myaudience",
        ),
    )


@pytest.fixture
def configuration(credentials):
    yield Configuration(
        api_url="https://api.fga.example",
        credentials=credentials,
    )


@pytest.fixture
def oauth2_client(configuration):
    yield OAuth2Client(
        configuration=configuration,
    )


@pytest.fixture
def rest_client(configuration):
    rest_client = RestClient(
        configuration=configuration,
    )
    yield rest_client
    rest_client.close()


def test_get_authentication_valid_client_credentials(
    rest_client,
    oauth2_client,
):
    oauth2_client.access_token = "XYZ123"
    oauth2_client.access_expiry_time = datetime.now() + timedelta(seconds=60)

    auth_header = oauth2_client.get_authentication_header(rest_client)

    assert auth_header.name == "Authorization"
    assert auth_header.value == "Bearer XYZ123"


def test_get_authentication_obtain_client_credentials(
    rest_client,
    oauth2_client,
    mocker,
):
    mock_request = mocker.patch.object(
        rest_client,
        "request",
        return_value=mock_response(
            {"expires_in": 120, "access_token": "AABBCCDD"}, 200
        ),
    )

    current_time = datetime.now()

    auth_header = oauth2_client.get_authentication_header(rest_client)

    assert auth_header.name == "Authorization"
    assert auth_header.value == "Bearer AABBCCDD"

    assert oauth2_client.access_token == "AABBCCDD"
    assert oauth2_client.access_expiry_time >= current_time + timedelta(seconds=120)

    expected_header = urllib3.response.HTTPHeaderDict(
        {
            "Accept": "application/json",
            "Content-Type": "application/x-www-form-urlencoded",
            "User-Agent": "openfga-sdk (python) 0.9.1",
        }
    )

    mock_request.assert_called_once_with(
        method="POST",
        url="https://issuer.fga.example/oauth/token",
        headers=expected_header,
        post_params={
            "client_id": "myclientid",
            "client_secret": "mysecret",
            "audience": "myaudience",
            "grant_type": "client_credentials",
        },
    )


def test_get_authentication_obtain_client_credentials_failed(
    rest_client,
    oauth2_client,
    mocker,
):
    mocker.patch.object(
        rest_client,
        "request",
        return_value=mock_response({"reason": "Unauthorized"}, 403),
    )

    with pytest.raises(AuthenticationError):
        oauth2_client.get_authentication_header(rest_client)


def test_get_authentication_obtain_with_expired_client_credentials_failed(
    rest_client,
    oauth2_client,
    mocker,
):
    mocker.patch.object(
        rest_client,
        "request",
        return_value=mock_response({"reason": "Unauthorized"}, 403),
    )

    oauth2_client.access_token = "XYZ123"
    oauth2_client.access_expiry_time = datetime.now() - timedelta(seconds=240)

    with pytest.raises(AuthenticationError):
        oauth2_client.get_authentication_header(rest_client)


def test_get_authentication_unexpected_response_fails(
    mocker,
    rest_client,
    oauth2_client,
):
    mocker.patch.object(
        rest_client,
        "request",
        return_value=mock_response("This is not a JSON response", 200),
    )

    with pytest.raises(AuthenticationError):
        oauth2_client.get_authentication_header(rest_client)


def test_get_authentication_erroneous_response_fails(
    mocker,
    rest_client,
    oauth2_client,
):
    mocker.patch.object(
        rest_client,
        "request",
        return_value=mock_response({"access_token": "AABBCCDD"}, 200),
    )

    with pytest.raises(AuthenticationError):
        oauth2_client.get_authentication_header(rest_client)


def test_get_authentication_retries_5xx_responses(
    mocker,
    rest_client,
    oauth2_client,
):
    error_response = {
        "code": "rate_limit_exceeded",
        "message": "Rate Limit exceeded",
    }

    success_response = {"expires_in": 120, "access_token": "AABBCCDD"}

    side_effect = [
        mock_response(error_response, 429),
        mock_response(error_response, 429),
        mock_response(error_response, 429),
        mock_response(success_response, 200),
    ]

    mock_request = mocker.patch.object(rest_client, "request", side_effect=side_effect)

    oauth2_client.configuration.retry_params.max_retries = 5
    oauth2_client.configuration.retry_params.min_wait_in_ms = 0

    auth_header = oauth2_client.get_authentication_header(rest_client)

    mock_request.assert_called()

    assert mock_request.call_count == 4

    assert auth_header.name == "Authorization"
    assert auth_header.value == "Bearer AABBCCDD"
