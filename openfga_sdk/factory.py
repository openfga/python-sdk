"""
Python SDK for OpenFGA

API version: 1.x
Website: https://openfga.dev
Documentation: https://openfga.dev/docs
Support: https://openfga.dev/community
License: [Apache-2.0](https://github.com/openfga/python-sdk/blob/main/LICENSE)

NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
"""

from dataclasses import dataclass
from openfga_sdk.protocols import (
    ApiClientProtocol,
    FactoryProtocol,
    OAuth2ClientProtocol,
    OpenFgaApiProtocol,
    OpenFgaClientProtocol,
    RestClientProtocol,
    ConfigurationProtocol,
)
from openfga_sdk.telemetry.telemetry import Telemetry


@dataclass
class Factory(FactoryProtocol):
    configuration: ConfigurationProtocol

    _auth_client: OAuth2ClientProtocol | None = None
    _client: OpenFgaClientProtocol | None = None
    _api: OpenFgaApiProtocol | None = None
    _api_client: ApiClientProtocol | None = None
    _rest_client: RestClientProtocol | None = None
    _telemetry_client: Telemetry | None = None

    @property
    def client(self) -> OpenFgaClientProtocol:
        if self._client is None:
            from openfga_sdk.client import OpenFgaClient

            self._client = OpenFgaClient(self.configuration)

        return self._client

    @property
    def auth_client(self) -> OAuth2ClientProtocol:
        if self._auth_client is None:
            from openfga_sdk.oauth2 import OAuth2Client

            self._auth_client = OAuth2Client(self.configuration)

        return self._auth_client

    @property
    def api(self) -> OpenFgaApiProtocol:
        if self._api is None:
            from openfga_sdk.api import OpenFgaApi

            self._api = OpenFgaApi(self.configuration)

        return self._api

    @property
    def api_client(self) -> ApiClientProtocol:
        if self._api_client is None:
            from openfga_sdk.api_client import ApiClient

            self._api_client = ApiClient(self.configuration)

        return self._api_client

    @property
    def rest_client(self) -> RestClientProtocol:
        if self._rest_client is None:
            from openfga_sdk.rest import RestClient

            self._rest_client = RestClient(self.configuration)

        return self._rest_client

    @property
    def telemetry_client(self) -> Telemetry:
        if self._telemetry_client is None:
            self._telemetry_client = Telemetry()

        return self._telemetry_client
