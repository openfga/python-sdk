"""
Python SDK for OpenFGA

API version: 1.x
Website: https://openfga.dev
Documentation: https://openfga.dev/docs
Support: https://openfga.dev/community
License: [Apache-2.0](https://github.com/openfga/python-sdk/blob/main/LICENSE)

NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
"""

import re

from openfga_sdk.exceptions import FgaValidationException


def is_well_formed_ulid_string(ulid):
    regex = re.compile("^[0-7][0-9A-HJKMNP-TV-Z]{25}$")
    if not isinstance(ulid, str):
        return False
    match = regex.match(ulid)
    if match is None:
        return False
    return True


class ValidatedInteger:
    _name: str | None = None
    _value: int | None = None
    _min: int | None = None
    _max: int | None = None
    _exception: Exception | None = None

    def __init__(
        self,
        *,
        value: int,
        min: int | None = None,
        max: int | None = None,
        exception: Exception = FgaValidationException,
    ):
        self._value = value
        self._min = min
        self._max = max
        self._exception = exception

    def __set_name__(self, owner, name):
        self._name = "_" + name

    def __get__(self, obj, type) -> int:
        if obj is None:
            return self._value

        return getattr(obj, self._name, self._value)

    def __set__(self, obj, value):
        setattr(obj, self._name, int(value))

        if self._min is not None and self._max is not None:
            if not (self._min <= value <= self._max):
                raise self._exception(
                    f"{value} is not in range [{self._min}, {self._max}]"
                )

        if self._min is not None:
            if value < self._min:
                raise self._exception(f"{value} is less than {self._min}")

        if self._max is not None:
            if value > self._max:
                raise self._exception(f"{value} is greater than {self._max}")
