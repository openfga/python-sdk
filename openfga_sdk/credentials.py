"""
Python SDK for OpenFGA

API version: 1.x
Website: https://openfga.dev
Documentation: https://openfga.dev/docs
Support: https://openfga.dev/community
License: [Apache-2.0](https://github.com/openfga/python-sdk/blob/main/LICENSE)

NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
"""

from urllib.parse import urlparse, urlunparse

from dataclasses import dataclass

from openfga_sdk.exceptions import ApiValueError
from openfga_sdk.protocols import CredentialConfigurationProtocol, CredentialsProtocol


def none_or_empty(value):
    """
    Return true if value is either none or empty string
    """
    return value is None or value == ""


@dataclass
class CredentialConfiguration(CredentialConfigurationProtocol):
    client_id: str | None = None
    client_secret: str | None = None
    api_audience: str | None = None
    api_issuer: str | None = None
    api_token: str | None = None


@dataclass
class Credentials(CredentialsProtocol):
    method: str | None = None
    configuration: CredentialConfigurationProtocol | None = None

    def validate(self):
        if (
            self.method != "none"
            and self.method != None
            and self.method != "api_token"
            and self.method != "client_credentials"
        ):
            raise ApiValueError(
                f"method `{self.method}` must be either `none`, `api_token` or `client_credentials`"
            )

        if self.method == "api_token" and (
            self.configuration is None or none_or_empty(self.configuration.api_token)
        ):
            raise ApiValueError(
                f"configuration `{self.configuration}` api_token must be defined and non empty when method is api_token"
            )

        if self.method == "client_credentials":
            if (
                self.configuration is None
                or none_or_empty(self.configuration.client_id)
                or none_or_empty(self.configuration.client_secret)
                or none_or_empty(self.configuration.api_audience)
                or none_or_empty(self.configuration.api_issuer)
            ):
                raise ApiValueError(
                    "configuration `{}` requires client_id, client_secret, api_audience and api_issuer defined for client_credentials method."
                )

            self._parse_issuer(self.configuration.api_issuer)

    def _parse_issuer(self, issuer: str):
        default_endpoint_path = "/oauth/token"

        parsed_url = urlparse(issuer.strip())

        try:
            parsed_url.port
        except ValueError as e:
            raise ApiValueError(e)

        if parsed_url.netloc is None and parsed_url.path is None:
            raise ApiValueError("Invalid issuer")

        if parsed_url.scheme == "":
            parsed_url = urlparse(f"https://{issuer}")
        elif parsed_url.scheme not in ("http", "https"):
            raise ApiValueError(
                f"Invalid issuer scheme {parsed_url.scheme} must be HTTP or HTTPS"
            )

        if parsed_url.path in ("", "/"):
            parsed_url = parsed_url._replace(path=default_endpoint_path)

        valid_url = urlunparse(parsed_url)

        return valid_url
