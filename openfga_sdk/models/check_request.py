"""
Python SDK for OpenFGA

API version: 1.x
Website: https://openfga.dev
Documentation: https://openfga.dev/docs
Support: https://openfga.dev/community
License: [Apache-2.0](https://github.com/openfga/python-sdk/blob/main/LICENSE)

NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
"""

import pprint

from inspect import getfullargspec


class CheckRequest:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types: dict[str, str] = {
        "tuple_key": "CheckRequestTupleKey",
        "contextual_tuples": "ContextualTupleKeys",
        "authorization_model_id": "str",
        "trace": "bool",
        "context": "object",
        "consistency": "ConsistencyPreference",
    }

    attribute_map: dict[str, str] = {
        "tuple_key": "tuple_key",
        "contextual_tuples": "contextual_tuples",
        "authorization_model_id": "authorization_model_id",
        "trace": "trace",
        "context": "context",
        "consistency": "consistency",
    }

    def __init__(
        self,
        tuple_key=None,
        contextual_tuples=None,
        authorization_model_id=None,
        trace=None,
        context=None,
        consistency=None,
        local_vars_configuration=None,
    ):
        """CheckRequest - a model defined in OpenAPI"""

        self.local_vars_configuration: dict = local_vars_configuration or {}

        self._tuple_key = None
        self._contextual_tuples = None
        self._authorization_model_id = None
        self._trace = None
        self._context = None
        self._consistency = None
        self.discriminator = None

        self.tuple_key = tuple_key
        if contextual_tuples is not None:
            self.contextual_tuples = contextual_tuples
        if authorization_model_id is not None:
            self.authorization_model_id = authorization_model_id
        if trace is not None:
            self.trace = trace
        if context is not None:
            self.context = context
        if consistency is not None:
            self.consistency = consistency

    @property
    def tuple_key(self):
        """Gets the tuple_key of this CheckRequest.


        :return: The tuple_key of this CheckRequest.
        :rtype: CheckRequestTupleKey
        """
        return self._tuple_key

    @tuple_key.setter
    def tuple_key(self, tuple_key):
        """Sets the tuple_key of this CheckRequest.


        :param tuple_key: The tuple_key of this CheckRequest.
        :type tuple_key: CheckRequestTupleKey
        """
        if (
            self.local_vars_configuration.get("client_side_validation") == True
            and tuple_key is None
        ):
            raise ValueError("Invalid value for `tuple_key`, must not be `None`")

        self._tuple_key = tuple_key

    @property
    def contextual_tuples(self):
        """Gets the contextual_tuples of this CheckRequest.


        :return: The contextual_tuples of this CheckRequest.
        :rtype: ContextualTupleKeys
        """
        return self._contextual_tuples

    @contextual_tuples.setter
    def contextual_tuples(self, contextual_tuples):
        """Sets the contextual_tuples of this CheckRequest.


        :param contextual_tuples: The contextual_tuples of this CheckRequest.
        :type contextual_tuples: ContextualTupleKeys
        """

        self._contextual_tuples = contextual_tuples

    @property
    def authorization_model_id(self):
        """Gets the authorization_model_id of this CheckRequest.


        :return: The authorization_model_id of this CheckRequest.
        :rtype: str
        """
        return self._authorization_model_id

    @authorization_model_id.setter
    def authorization_model_id(self, authorization_model_id):
        """Sets the authorization_model_id of this CheckRequest.


        :param authorization_model_id: The authorization_model_id of this CheckRequest.
        :type authorization_model_id: str
        """

        self._authorization_model_id = authorization_model_id

    @property
    def trace(self):
        """Gets the trace of this CheckRequest.

        Defaults to false. Making it true has performance implications.

        :return: The trace of this CheckRequest.
        :rtype: bool
        """
        return self._trace

    @trace.setter
    def trace(self, trace):
        """Sets the trace of this CheckRequest.

        Defaults to false. Making it true has performance implications.

        :param trace: The trace of this CheckRequest.
        :type trace: bool
        """

        self._trace = trace

    @property
    def context(self):
        """Gets the context of this CheckRequest.

        Additional request context that will be used to evaluate any ABAC conditions encountered in the query evaluation.

        :return: The context of this CheckRequest.
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this CheckRequest.

        Additional request context that will be used to evaluate any ABAC conditions encountered in the query evaluation.

        :param context: The context of this CheckRequest.
        :type context: object
        """

        self._context = context

    @property
    def consistency(self):
        """Gets the consistency of this CheckRequest.


        :return: The consistency of this CheckRequest.
        :rtype: ConsistencyPreference
        """
        return self._consistency

    @consistency.setter
    def consistency(self, consistency):
        """Sets the consistency of this CheckRequest.


        :param consistency: The consistency of this CheckRequest.
        :type consistency: ConsistencyPreference
        """

        self._consistency = consistency

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], convert(item[1])), value.items())
                )
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CheckRequest):
            return True

        return self.to_dict() != other.to_dict()
