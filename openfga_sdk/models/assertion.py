"""
Python SDK for OpenFGA

API version: 1.x
Website: https://openfga.dev
Documentation: https://openfga.dev/docs
Support: https://openfga.dev/community
License: [Apache-2.0](https://github.com/openfga/python-sdk/blob/main/LICENSE)

NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
"""

import pprint

from inspect import getfullargspec


class Assertion:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types: dict[str, str] = {
        "tuple_key": "AssertionTupleKey",
        "expectation": "bool",
        "contextual_tuples": "list[TupleKey]",
        "context": "object",
    }

    attribute_map: dict[str, str] = {
        "tuple_key": "tuple_key",
        "expectation": "expectation",
        "contextual_tuples": "contextual_tuples",
        "context": "context",
    }

    def __init__(
        self,
        tuple_key=None,
        expectation=None,
        contextual_tuples=None,
        context=None,
        local_vars_configuration=None,
    ):
        """Assertion - a model defined in OpenAPI"""

        self.local_vars_configuration: dict = local_vars_configuration or {}

        self._tuple_key = None
        self._expectation = None
        self._contextual_tuples = None
        self._context = None
        self.discriminator = None

        self.tuple_key = tuple_key
        self.expectation = expectation
        if contextual_tuples is not None:
            self.contextual_tuples = contextual_tuples
        if context is not None:
            self.context = context

    @property
    def tuple_key(self):
        """Gets the tuple_key of this Assertion.


        :return: The tuple_key of this Assertion.
        :rtype: AssertionTupleKey
        """
        return self._tuple_key

    @tuple_key.setter
    def tuple_key(self, tuple_key):
        """Sets the tuple_key of this Assertion.


        :param tuple_key: The tuple_key of this Assertion.
        :type tuple_key: AssertionTupleKey
        """
        if (
            self.local_vars_configuration.get("client_side_validation") == True
            and tuple_key is None
        ):
            raise ValueError("Invalid value for `tuple_key`, must not be `None`")

        self._tuple_key = tuple_key

    @property
    def expectation(self):
        """Gets the expectation of this Assertion.


        :return: The expectation of this Assertion.
        :rtype: bool
        """
        return self._expectation

    @expectation.setter
    def expectation(self, expectation):
        """Sets the expectation of this Assertion.


        :param expectation: The expectation of this Assertion.
        :type expectation: bool
        """
        if (
            self.local_vars_configuration.get("client_side_validation") == True
            and expectation is None
        ):
            raise ValueError("Invalid value for `expectation`, must not be `None`")

        self._expectation = expectation

    @property
    def contextual_tuples(self):
        """Gets the contextual_tuples of this Assertion.


        :return: The contextual_tuples of this Assertion.
        :rtype: list[TupleKey]
        """
        return self._contextual_tuples

    @contextual_tuples.setter
    def contextual_tuples(self, contextual_tuples):
        """Sets the contextual_tuples of this Assertion.


        :param contextual_tuples: The contextual_tuples of this Assertion.
        :type contextual_tuples: list[TupleKey]
        """

        self._contextual_tuples = contextual_tuples

    @property
    def context(self):
        """Gets the context of this Assertion.

        Additional request context that will be used to evaluate any ABAC conditions encountered in the query evaluation.

        :return: The context of this Assertion.
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Assertion.

        Additional request context that will be used to evaluate any ABAC conditions encountered in the query evaluation.

        :param context: The context of this Assertion.
        :type context: object
        """

        self._context = context

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], convert(item[1])), value.items())
                )
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Assertion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Assertion):
            return True

        return self.to_dict() != other.to_dict()
