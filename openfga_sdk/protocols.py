"""
Python SDK for OpenFGA

API version: 1.x
Website: https://openfga.dev
Documentation: https://openfga.dev/docs
Support: https://openfga.dev/community
License: [Apache-2.0](https://github.com/openfga/python-sdk/blob/main/LICENSE)

NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
"""

from enum import Enum
import logging
import ssl

from multiprocessing.pool import ThreadPool
from typing import Any, Protocol, TypeVar, runtime_checkable
from dataclasses import dataclass, fields, is_dataclass

T = TypeVar("T", bound="MergeableDataclassMixin")


@dataclass
class MergeableDataclassMixin:
    """Mixin to add merging functionality to dataclasses."""

    def merge_with(self: T, other: Any) -> T:
        """Merge this dataclass with another dataclass, preserving nested structures."""
        if not is_dataclass(other):
            raise TypeError(f"Cannot merge with non-dataclass object: {type(other)}")
        return merge_dataclasses(self, other)

    def __or__(self: T, other: Any) -> T:
        """Enable the `|` operator for merging."""
        return self.merge_with(other)


def merge_dataclasses(instance1, instance2):
    if not is_dataclass(instance1) or not is_dataclass(instance2):
        raise ValueError("merge_dataclasses can only merge dataclass instances")

    merged_data = {}
    for field in fields(instance1):
        field_name = field.name
        value1 = getattr(instance1, field_name, None)
        value2 = getattr(instance2, field_name, None)

        if is_dataclass(value1) and is_dataclass(value2):
            merged_data[field_name] = merge_dataclasses(value1, value2)
        else:
            merged_data[field_name] = value2 if value2 is not None else value1

    return instance1.__class__(**merged_data)


@runtime_checkable
class FgaModelProtocol(Protocol):
    pass


@runtime_checkable
class CredentialConfigurationProtocol(Protocol):
    pass


@runtime_checkable
class CredentialsProtocol(Protocol):
    method: str | None = None
    configuration: CredentialConfigurationProtocol | None = None

    def validate(self) -> None: ...


@runtime_checkable
class RetryParamsProtocol(Protocol):
    DEFAULT_MAX_RETRIES = 3
    DEFAULT_MIN_WAIT = 100
    pass


@runtime_checkable
class TelemetryConfigurationProtocol(Protocol):
    pass


@runtime_checkable
class ConfigurationDataProtocol(Protocol):
    pass


@runtime_checkable
class ConfigurationProtocol(Protocol):
    @classmethod
    def get_default_copy(cls) -> ConfigurationDataProtocol: ...

    @property
    def api_key_prefix(self) -> dict[str, bool | int | str]: ...

    @api_key_prefix.setter
    def api_key_prefix(self, value: dict[str, bool | int | str]): ...

    @property
    def api_key(self) -> dict[str, bool | int | str]: ...

    @api_key.setter
    def api_key(self, value: dict[str, bool | int | str]): ...

    @property
    def api_url(self) -> str: ...

    @api_url.setter
    def api_url(self, value: str) -> None: ...

    @property
    def authorization_model_id(self) -> str | None: ...

    @authorization_model_id.setter
    def authorization_model_id(self, value: str | None) -> None: ...

    @property
    def assert_hostname(self) -> str | None: ...

    @assert_hostname.setter
    def assert_hostname(self, value: str | None): ...

    @property
    def cert_file(self) -> str | None: ...

    @cert_file.setter
    def cert_file(self, value: str | None): ...

    @property
    def client_side_validation(self) -> bool: ...

    @client_side_validation.setter
    def client_side_validation(self, value: bool): ...

    @property
    def connection_pool_size(self) -> int: ...

    @connection_pool_size.setter
    def connection_pool_size(self, value: int): ...

    @property
    def connection_pool_size_max(self) -> int: ...

    @connection_pool_size_max.setter
    def connection_pool_size_max(self, value: int): ...

    @property
    def credentials(self) -> CredentialsProtocol | None: ...

    @credentials.setter
    def credentials(self, value: CredentialsProtocol | None): ...

    @property
    def debug(self) -> bool: ...

    @debug.setter
    def debug(self, value: bool) -> None: ...

    @property
    def discard_unknown_keys(self) -> bool: ...

    @discard_unknown_keys.setter
    def discard_unknown_keys(self, value: bool) -> None: ...

    @property
    def key_file(self) -> str | None: ...

    @key_file.setter
    def key_file(self, value: str | None): ...

    @property
    def logger_file(self) -> str | None: ...

    @logger_file.setter
    def logger_file(self, value: str | None) -> None: ...

    @property
    def logger_format(self) -> str: ...

    @logger_format.setter
    def logger_format(self, value: str) -> None: ...

    @property
    def logger(self) -> dict[str, logging.Logger]: ...

    @logger.setter
    def logger(self, value: dict[str, logging.Logger]) -> None: ...

    @property
    def password(self) -> str | None: ...

    @password.setter
    def password(self, value: str | None) -> None: ...

    @property
    def proxy_headers(self) -> dict[str, str] | None: ...

    @proxy_headers.setter
    def proxy_headers(self, value: dict[str, str] | None) -> None: ...

    @property
    def proxy(self) -> dict[str, str] | None: ...

    @proxy.setter
    def proxy(self, value: dict[str, str] | None) -> None: ...

    @property
    def retry_params(self) -> RetryParamsProtocol: ...

    @retry_params.setter
    def retry_params(self, value: RetryParamsProtocol) -> None: ...

    @property
    def socket_options(self) -> list[tuple[int, int, int | bytes]] | None: ...

    @socket_options.setter
    def socket_options(
        self, value: list[tuple[int, int, int | bytes]] | None
    ) -> None: ...

    @property
    def ssl_ca_cert(self) -> str | None: ...

    @ssl_ca_cert.setter
    def ssl_ca_cert(self, value: str | None) -> None: ...

    @property
    def store_id(self) -> str | None: ...

    @store_id.setter
    def store_id(self, value: str | None) -> None: ...

    @property
    def telemetry(self) -> TelemetryConfigurationProtocol: ...

    @telemetry.setter
    def telemetry(self, value: TelemetryConfigurationProtocol) -> None: ...

    @property
    def timeout(self) -> int: ...

    @timeout.setter
    def timeout(self, value: int) -> None: ...

    @property
    def username(self) -> str | None: ...

    @username.setter
    def username(self, value: str | None) -> None: ...

    @property
    def verify_ssl(self) -> bool: ...

    @verify_ssl.setter
    def verify_ssl(self, value: bool) -> None: ...


@runtime_checkable
class HttpHeaderProtocol(Protocol):
    pass


@runtime_checkable
class HttpHeadersProtocol(Protocol):
    def add_header(self, name: str, value: str, overwrite: bool = True) -> None: ...

    def get_header(self, name: str) -> list: ...

    def remove_header(self, name: str) -> None: ...

    def items(self): ...


@runtime_checkable
class HttpCookieProtocol(Protocol):
    pass


@runtime_checkable
class HttpCookiesProtocol(Protocol):
    def add_cookie(self, name: str, value: str, **kwargs) -> None: ...

    def get_cookie(self, name: str) -> HttpCookieProtocol | None: ...

    def remove_cookie(self, name: str) -> None: ...

    def items(self): ...


@runtime_checkable
class RestClientResponseProtocol(Protocol):
    response: (
        type["aiohttp.ClientResponse"] | type["urllib3.BaseHTTPResponse"] | None
    ) = None
    data: bytes | None = None
    status: int | None = None
    reason: str | None = None

    @property
    def headers(self) -> dict[str, str]: ...

    def header(self, name: str, default: str | None = None) -> str | None:
        return self.headers.get(name, default)


@runtime_checkable
@dataclass
class RestClientRequestProtocol(Protocol):
    method: str
    url: str
    body: str | None = None
    fields: dict[str, str] | None = None
    headers: dict[str, str] | None = None
    multipart: bool | None = None


@runtime_checkable
class RestClientRequestQueryParameterProtocol(Protocol):
    pass


@runtime_checkable
class RestClientRequestQueryParametersProtocol(Protocol):
    def add_parameter(self, name: str, value: str, **kwargs) -> None: ...

    def get_parameter(
        self, name: str
    ) -> RestClientRequestQueryParameterProtocol | None: ...

    def remove_parameter(self, name: str) -> None: ...

    def merge(self, other: "RestClientRequestQueryParametersProtocol") -> None: ...


@runtime_checkable
class RestClientRequestFieldParameterProtocol(Protocol):
    pass


@runtime_checkable
class RestClientRequestFieldParametersProtocol(Protocol):
    def add_parameter(self, name: str, value: str, **kwargs) -> None: ...

    def get_parameter(
        self, name: str
    ) -> RestClientRequestFieldParameterProtocol | None: ...

    def remove_parameter(self, name: str) -> None: ...

    def merge(self, other: "RestClientRequestFieldParametersProtocol") -> None: ...


@runtime_checkable
class RestClientRequestBodyProtocol(Protocol):
    pass


@runtime_checkable
@dataclass
class RestClientProtocol(Protocol):
    _ssl_context: ssl.SSLContext | None = None
    _pool_size_max: int | None = None
    _pool_size: int | None = None
    _debug: bool | None = None

    @property
    def ssl_context(self) -> ssl.SSLContext: ...

    @property
    def debug(self) -> bool:
        return self._debug or self._configuration.debug

    @debug.setter
    def debug(self, value: bool | None) -> None:
        self._debug = value

    @staticmethod
    def build_request(
        method: Enum,
        url: str,
        body: RestClientRequestBodyProtocol | None = None,
        headers: HttpHeadersProtocol | None = None,
        query: RestClientRequestQueryParametersProtocol | None = None,
        fields: RestClientRequestFieldParametersProtocol | None = None,
    ) -> RestClientRequestProtocol: ...


@runtime_checkable
class OAuth2ClientProtocol(Protocol):
    def get_authentication_header(
        self,
        client: RestClientProtocol,
    ) -> HttpHeaderProtocol: ...


@runtime_checkable
class TelemetryAttributeProtocol(Protocol):
    # Duck type for TelemetryAttribute, as NamedTuples cannot inherit from Protocol

    @property
    def name(self) -> str: ...

    @property
    def format(self) -> str: ...


@runtime_checkable
class StoreRequestOptionsProtocol(Protocol):
    pass


@runtime_checkable
class ApiResponseProtocol(Protocol):
    retries: int = 0
    exception: Exception | None = None
    request: RestClientRequestProtocol | None = None
    response: RestClientResponseProtocol | None = None
    deserialized: FgaModelProtocol | None = None

    @property
    def status(self) -> int | None: ...


@runtime_checkable
class ApiClientResponseProtocol(Protocol):
    retries: int = 0
    exception: Exception | None = None
    request: RestClientRequestProtocol | None = None
    response: RestClientResponseProtocol | None = None

    @property
    def status(self) -> int | None: ...


@runtime_checkable
class ApiClientProtocol(Protocol):
    @property
    def pool(self) -> ThreadPool: ...

    def request(
        self,
        path: str,
        method: Enum,
        body: RestClientRequestBodyProtocol | None = None,
        headers: HttpHeadersProtocol | None = None,
        query: RestClientRequestQueryParametersProtocol | None = None,
        fields: RestClientRequestFieldParametersProtocol | None = None,
        cookies: HttpCookiesProtocol | None = None,
        timeout: int | None = None,
        response_types: list[tuple[int, str]] | None = None,
        attributes: (
            dict[TelemetryAttributeProtocol, str | bool | int | float] | None
        ) = None,
        streaming: bool = False,
    ) -> ApiClientResponseProtocol: ...


@runtime_checkable
class OpenFgaApiProtocol(Protocol):
    pass


@runtime_checkable
class OpenFgaClientProtocol(Protocol):
    pass


@runtime_checkable
class FactoryProtocol(Protocol):
    @property
    def auth_client(self) -> OAuth2ClientProtocol: ...

    @property
    def api(self) -> OpenFgaApiProtocol: ...

    @property
    def api_client(self) -> ApiClientProtocol: ...

    @property
    def rest_client(self) -> RestClientProtocol: ...


@runtime_checkable
class FactoryConsumerProtocol(Protocol):
    @property
    def factory(self) -> FactoryProtocol: ...

    @factory.setter
    def factory(self, value: FactoryProtocol) -> None: ...

    @property
    def _factory_async(self) -> FactoryProtocol: ...

    @property
    def _factory_sync(self) -> FactoryProtocol: ...

    @property
    def auth_client(self) -> OAuth2ClientProtocol: ...

    @property
    def api(self) -> OpenFgaApiProtocol: ...

    @property
    def api_client(self) -> ApiClientProtocol: ...

    @property
    def rest_client(self) -> RestClientProtocol: ...
