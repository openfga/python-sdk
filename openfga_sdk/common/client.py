"""
Python SDK for OpenFGA

API version: 1.x
Website: https://openfga.dev
Documentation: https://openfga.dev/docs
Support: https://openfga.dev/community
License: [Apache-2.0](https://github.com/openfga/python-sdk/blob/main/LICENSE)

NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
"""

from dataclasses import dataclass
from openfga_sdk.client.models.client_batch_check_response import (
    ClientBatchCheckClientResponse,
)
from openfga_sdk.common.factory import FactoryConsumer
from openfga_sdk.exceptions import FgaValidationException
from openfga_sdk.protocols import (
    ApiClientProtocol,
    OAuth2ClientProtocol,
    OpenFgaApiProtocol,
    OpenFgaClientProtocol,
    ConfigurationProtocol,
    FactoryProtocol,
    RestClientProtocol,
)
from openfga_sdk.validation import is_well_formed_ulid_string


@dataclass
class OpenFgaClientBase(FactoryConsumer, OpenFgaClientProtocol):
    configuration: ConfigurationProtocol
    factory: FactoryProtocol | None = None

    def _get_authorization_model_id(
        self,
        options: dict[str, int | str | dict[str, int | str]] | None = None,
    ) -> str | None:
        """
        Return the authorization model ID if specified in the options.
        Otherwise, return the authorization model ID stored in the client's configuration
        """
        authorization_model_id = self.configuration.authorization_model_id

        if (
            options is not None
            and "authorization_model_id" in options
            and type(options["authorization_model_id"]) is str
        ):
            authorization_model_id = options["authorization_model_id"]

        if authorization_model_id is None or authorization_model_id == "":
            return None

        if is_well_formed_ulid_string(authorization_model_id) is False:
            raise FgaValidationException(
                f"authorization_model_id ('{authorization_model_id}') is not in a valid ulid format"
            )

        return authorization_model_id

    def set_store_id(self, value):
        """
        Update the store ID in the configuration
        """
        self.configuration.store_id = value

    def get_store_id(self):
        """
        Return the store id (if any) store in the configuration
        """
        return self.configuration.store_id

    def set_authorization_model_id(self, value):
        """
        Update the authorization model id in the configuration
        """
        self.configuration.authorization_model_id = value

    def get_authorization_model_id(self):
        """
        Return the authorization model id
        """
        return self.configuration.authorization_model_id

    @staticmethod
    def _get_consistency(
        options: dict[str, int | str | dict[str, int | str]] | None = None,
    ) -> str | None:
        """
        Returns the consistency requested if specified in the options.
        Otherwise, returns None.
        """
        consistency: int | str | dict[str, int | str] | None = (
            options.get("consistency", None) if options is not None else None
        )

        if type(consistency) is str:
            return consistency

        return None

    @staticmethod
    def _chuck_array(array, max_size):
        """
        Helper function to chuck array into arrays of max_size
        """
        return [
            array[i * max_size : (i + 1) * max_size]
            for i in range((len(array) + max_size - 1) // max_size)
        ]

    @staticmethod
    def _set_heading_if_not_set(
        options: dict[str, int | str | dict[str, int | str]] | None,
        name: str,
        value: str,
    ) -> dict[str, int | str | dict[str, int | str]]:
        """
        Set heading to the value if it is not set
        """
        _options: dict[str, int | str | dict[str, int | str]] = (
            options if options is not None else {}
        )

        if type(_options.get("headers")) is not dict:
            _options["headers"] = {}

        if type(_options["headers"]) is dict:
            if type(_options["headers"].get(name)) not in [int, str]:
                _options["headers"][name] = value

        return _options

    @staticmethod
    def _options_to_kwargs(
        options: dict[str, int | str | dict[str, int | str]] | None = None,
    ) -> dict[str, int | str | dict[str, int | str]]:
        """
        Return kwargs with continuation_token and page_size
        """
        kwargs = {}
        if options is not None:
            if options.get("page_size"):
                kwargs["page_size"] = options["page_size"]
            if options.get("continuation_token"):
                kwargs["continuation_token"] = options["continuation_token"]
            if options.get("headers"):
                kwargs["_headers"] = options["headers"]
            if options.get("retry_params"):
                kwargs["_retry_params"] = options["retry_params"]
        return kwargs

    @staticmethod
    def _check_allowed(response: ClientBatchCheckClientResponse):
        """
        Helper function to return whether the response is check is allowed
        """
        return response.allowed
