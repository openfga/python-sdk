"""
Python SDK for OpenFGA

API version: 1.x
Website: https://openfga.dev
Documentation: https://openfga.dev/docs
Support: https://openfga.dev/community
License: [Apache-2.0](https://github.com/openfga/python-sdk/blob/main/LICENSE)

NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
"""

from dataclasses import dataclass, field, fields

from openfga_sdk.protocols import (
    HttpCookieProtocol,
    HttpCookiesProtocol,
    StoreRequestOptionsProtocol,
)


@dataclass
class HttpCookie(HttpCookieProtocol):
    name: str
    value: str
    domain: str | None = None
    path: str | None = "/"
    secure: bool = False
    http_only: bool = False
    max_age: int | None = None
    expires: str | None = None

    def __str__(self) -> str:
        cookie = f"{self.name}={self.value}"
        if self.domain:
            cookie += f"; Domain={self.domain}"
        if self.path:
            cookie += f"; Path={self.path}"
        if self.secure:
            cookie += "; Secure"
        if self.http_only:
            cookie += "; HttpOnly"
        if self.max_age is not None:
            cookie += f"; Max-Age={self.max_age}"
        if self.expires:
            cookie += f"; Expires={self.expires}"
        return cookie


@dataclass
class HttpCookies(HttpCookiesProtocol):
    cookies: dict[str, HttpCookie] = field(default_factory=dict)

    def add_cookie(self, name: str, value: str, **kwargs) -> None:
        self.cookies[name] = HttpCookie(name=name, value=value, **kwargs)

    def get_cookie(self, name: str) -> HttpCookieProtocol | None:
        return self.cookies.get(name)

    def remove_cookie(self, name: str) -> None:
        self.cookies.pop(name, None)

    def merge(self, other: "HttpCookiesProtocol") -> None:
        for name, cookies_list in other.cookies.items():
            if name in self.cookies:
                self.cookies[name].extend(cookies_list)
            else:
                self.cookies[name] = cookies_list.copy()

    def as_header(self) -> str:
        return "; ".join(str(cookie) for cookie in self.cookies.values())

    def __getitem__(self, name: str) -> HttpCookieProtocol | None:
        return self.get_cookie(name)

    def __setitem__(self, name: str, value: HttpCookieProtocol) -> None:
        self.cookies[name] = value

    def __delitem__(self, name: str) -> None:
        self.remove_cookie(name)

    def __contains__(self, name: str) -> bool:
        return name in self.cookies

    def __iter__(self):
        return iter(self.cookies)

    def items(self):
        return self.cookies.items()

    def __str__(self) -> str:
        return "\n".join(str(cookie) for cookie in self.cookies.values())

    @staticmethod
    def from_options(
        options: StoreRequestOptionsProtocol | None,
    ) -> "HttpCookiesProtocol":
        cookies = HttpCookies()

        if options is None:
            return cookies

        for field in fields(options):
            value = getattr(options, field.name)

            if value is None:
                continue

            match field.name:
                case "cookies":
                    if isinstance(value, HttpCookiesProtocol):
                        cookies.merge(value)

        return cookies
