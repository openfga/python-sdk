"""
Python SDK for OpenFGA

API version: 1.x
Website: https://openfga.dev
Documentation: https://openfga.dev/docs
Support: https://openfga.dev/community
License: [Apache-2.0](https://github.com/openfga/python-sdk/blob/main/LICENSE)

NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
"""

import time

from dateutil.parser import parse  # type: ignore[import-untyped]

from openfga_sdk.common.api_client import ApiClientBase, ApiClientResponse
from openfga_sdk.common.cookies import HttpCookies
from openfga_sdk.common.headers import HttpHeaders
from openfga_sdk.common.math import Math
from openfga_sdk.common.rest import (
    RestClientRequestBody,
    RestClientRequestFieldParameters,
    RestClientRequestMethod,
    RestClientRequestQueryParameters,
)
from openfga_sdk.protocols import (
    FactoryProtocol,
    HttpCookiesProtocol,
    HttpHeadersProtocol,
    RestClientRequestBodyProtocol,
    RestClientRequestFieldParametersProtocol,
    RestClientRequestQueryParametersProtocol,
    RestClientResponseProtocol,
    RetryParamsProtocol,
    TelemetryAttributeProtocol,
)
from openfga_sdk.telemetry.attributes import TelemetryAttribute, TelemetryAttributes


class ApiClient(ApiClientBase):
    async def __aenter__(self) -> "ApiClient":
        return self

    async def __aexit__(self, exc_type, exc_value, traceback) -> None:
        self.close()

    @property
    def _factory(self) -> FactoryProtocol:
        if self.factory is None:
            return self._factory_async

        return self.factory

    async def request(
        self,
        path: str,
        method: RestClientRequestMethod,
        body: RestClientRequestBodyProtocol | None = None,
        headers: HttpHeadersProtocol | None = None,
        query: RestClientRequestQueryParametersProtocol | None = None,
        fields: RestClientRequestFieldParametersProtocol | None = None,
        cookies: HttpCookiesProtocol | None = None,
        timeout: int | None = None,
        attributes: (
            dict[TelemetryAttributeProtocol, str | bool | int | float] | None
        ) = None,
        streaming: bool = False,
    ) -> ApiClientResponse:
        start = float(time.time())

        # Assemble request URL
        url = self.configuration.api_url + path

        # Prepare query parameters
        query: RestClientRequestQueryParameters = (
            query or RestClientRequestQueryParameters()
        )

        # Prepare POST parameters
        fields: RestClientRequestFieldParameters = (
            fields or RestClientRequestFieldParameters()
        )

        # Prepare request body
        body: RestClientRequestBody = body or RestClientRequestBody()

        # Prepare telemetry attributes
        attributes: dict[TelemetryAttribute, str | bool | int | float] = (
            attributes or {}
        )

        # Prepare cookies
        cookies: HttpCookies = cookies or HttpCookies()
        cookies.merge(self.cookies)

        # Prepare headers
        headers: HttpHeaders = headers or HttpHeaders()
        headers.merge(self.headers)

        # Add cookie headers to the request, if any
        if cookies:
            headers.add_header("Cookie", cookies.as_header())

        # Perform credentials exchange if necessary
        if (
            self.configuration.credentials is not None
            and self.configuration.credentials.method == "client_credentials"
        ):
            headers.insert_header(
                self.auth_client.get_authentication_header(self.rest_client)
            )

        # Collect automatic retry conditions
        max_retries = (
            self.configuration.retry_params.max_retries
            or RetryParamsProtocol.DEFAULT_MAX_RETRIES
        )

        min_wait_in_ms = (
            self.configuration.retry_params.min_wait_in_ms
            or RetryParamsProtocol.DEFAULT_MIN_WAIT
        )

        # Build the request object
        request = self.rest_client.build_request(
            method=method,
            url=url,
            body=body,
            headers=headers,
            query=query,
            fields=fields,
        )

        # Seed the telemetry attributes with the request data
        attributes = TelemetryAttributes.fromRequest(
            user_agent=self.user_agent,
            fga_method=path,
            http_method=method,
            url=url,
            resend_count=0,
            start=start,
            credentials=self.configuration.credentials,
            attributes=attributes,
        )

        for retry in range(max_retries + 1):
            attributes[TelemetryAttributes.http_request_resend_count] = retry
            response: RestClientResponseProtocol | None = None
            exception: Exception | None = None

            # try:
            response = await (
                self.rest_client.request(request)
                if not streaming
                else self.rest_client.stream(request)
            )

            response_status: int = (
                exception.status
                if exception is not None
                else response.status if response is not None else 500
            )

            retry_delay: int | None = self._should_retry(
                retry=retry,
                max_retries=max_retries,
                min_wait=min_wait_in_ms,
                e=exception,
                response_status=response_status,
            )

            # Update telemetry attributes with response data, if available
            attributes = TelemetryAttributes.fromResponse(
                response=response,
                credentials=self.configuration.credentials,
                attributes=attributes,
            )

            self.telemetry_client.metrics.request(
                attributes=attributes,
                configuration=self.configuration.telemetry,
            )

            self.telemetry_client.metrics.queryDuration(
                attributes=attributes,
                configuration=self.configuration.telemetry,
            )

            self.telemetry_client.metrics.requestDuration(
                attributes=attributes,
                configuration=self.configuration.telemetry,
            )

            if retry_delay is not None:
                time.sleep(retry_delay)
                continue

            return ApiClientResponse(
                retries=retry,
                request=request,
                response=response,
            )
