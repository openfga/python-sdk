"""
Python SDK for OpenFGA

API version: 1.x
Website: https://openfga.dev
Documentation: https://openfga.dev/docs
Support: https://openfga.dev/community
License: [Apache-2.0](https://github.com/openfga/python-sdk/blob/main/LICENSE)

NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
"""

from openfga_sdk.api_client import ApiClient
from openfga_sdk.exceptions import ApiValueError, FgaValidationException
from openfga_sdk.oauth2 import OAuth2Client
from openfga_sdk.telemetry import Telemetry
from openfga_sdk.telemetry.attributes import TelemetryAttribute, TelemetryAttributes


class OpenFgaApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client: ApiClient = api_client

        self._oauth2_client = None
        if api_client.configuration is not None:
            credentials = api_client.configuration.credentials
            if credentials is not None and credentials.method == "client_credentials":
                self._oauth2_client = OAuth2Client(
                    credentials, api_client.configuration
                )

        self._telemetry = Telemetry()

    async def __aenter__(self):
        return self

    async def __aexit__(self, exc_type, exc_value, traceback):
        await self.close()

    async def close(self):
        await self.api_client.close()

    async def batch_check(self, body, **kwargs):
        """Send a list of `check` operations in a single request

        The `BatchCheck` API functions nearly identically to `Check`, but instead of checking a single user-object relationship BatchCheck accepts a list of relationships to check and returns a map containing `BatchCheckItem` response for each check it received.  An associated `correlation_id` is required for each check in the batch. This ID is used to correlate a check to the appropriate response. It is a string consisting of only alphanumeric characters or hyphens with a maximum length of 36 characters. This `correlation_id` is used to map the result of each check to the item which was checked, so it must be unique for each item in the batch. We recommend using a UUID or ULID as the `correlation_id`, but you can use whatever unique identifier you need as long  as it matches this regex pattern: `^[\\w\\d-]{1,36}$`  For more details on how `Check` functions, see the docs for `/check`.  ### Examples #### A BatchCheckRequest ```json {   \"checks\": [      {        \"tuple_key\": {          \"object\": \"document:2021-budget\"          \"relation\": \"reader\",          \"user\": \"user:anne\",        },        \"contextual_tuples\": {...}        \"context\": {}        \"correlation_id\": \"01JA8PM3QM7VBPGB8KMPK8SBD5\"      },      {        \"tuple_key\": {          \"object\": \"document:2021-budget\"          \"relation\": \"reader\",          \"user\": \"user:bob\",        },        \"contextual_tuples\": {...}        \"context\": {}        \"correlation_id\": \"01JA8PMM6A90NV5ET0F28CYSZQ\"      }    ] } ```  Below is a possible response to the above request. Note that the result map's keys are the `correlation_id` values from the checked items in the request: ```json {    \"result\": {      \"01JA8PMM6A90NV5ET0F28CYSZQ\": {        \"allowed\": false,         \"error\": {\"message\": \"\"}      },      \"01JA8PM3QM7VBPGB8KMPK8SBD5\": {        \"allowed\": true,         \"error\": {\"message\": \"\"}      } } ```

        >>> thread = await api.batch_check(body)

        :param body: (required)
        :type body: BatchCheckRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BatchCheckResponse
        """
        kwargs["_return_http_data_only"] = True
        return await self.batch_check_with_http_info(body, **kwargs)

    async def batch_check_with_http_info(self, body, **kwargs):
        """Send a list of `check` operations in a single request

        The `BatchCheck` API functions nearly identically to `Check`, but instead of checking a single user-object relationship BatchCheck accepts a list of relationships to check and returns a map containing `BatchCheckItem` response for each check it received.  An associated `correlation_id` is required for each check in the batch. This ID is used to correlate a check to the appropriate response. It is a string consisting of only alphanumeric characters or hyphens with a maximum length of 36 characters. This `correlation_id` is used to map the result of each check to the item which was checked, so it must be unique for each item in the batch. We recommend using a UUID or ULID as the `correlation_id`, but you can use whatever unique identifier you need as long  as it matches this regex pattern: `^[\\w\\d-]{1,36}$`  For more details on how `Check` functions, see the docs for `/check`.  ### Examples #### A BatchCheckRequest ```json {   \"checks\": [      {        \"tuple_key\": {          \"object\": \"document:2021-budget\"          \"relation\": \"reader\",          \"user\": \"user:anne\",        },        \"contextual_tuples\": {...}        \"context\": {}        \"correlation_id\": \"01JA8PM3QM7VBPGB8KMPK8SBD5\"      },      {        \"tuple_key\": {          \"object\": \"document:2021-budget\"          \"relation\": \"reader\",          \"user\": \"user:bob\",        },        \"contextual_tuples\": {...}        \"context\": {}        \"correlation_id\": \"01JA8PMM6A90NV5ET0F28CYSZQ\"      }    ] } ```  Below is a possible response to the above request. Note that the result map's keys are the `correlation_id` values from the checked items in the request: ```json {    \"result\": {      \"01JA8PMM6A90NV5ET0F28CYSZQ\": {        \"allowed\": false,         \"error\": {\"message\": \"\"}      },      \"01JA8PM3QM7VBPGB8KMPK8SBD5\": {        \"allowed\": true,         \"error\": {\"message\": \"\"}      } } ```

        >>> thread = api.batch_check_with_http_info(body)

        :param body: (required)
        :type body: BatchCheckRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BatchCheckResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = ["body"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method batch_check"
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'body' is set
        if (
            self.api_client.client_side_validation
            and local_var_params.get("body") is None
        ):
            raise ApiValueError(
                "Missing the required parameter `body` when calling `batch_check`"
            )

        collection_formats = {}

        path_params = {}

        store_id = None

        if self.api_client._get_store_id() is None:
            raise ApiValueError(
                "Store ID expected in api_client's configuration when calling `batch_check`"
            )
        store_id = self.api_client._get_store_id()

        query_params = []

        header_params = dict(local_var_params.get("_headers", {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in local_var_params:
            body_params = local_var_params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                ["application/json"], "POST", body_params
            ),
        )
        if content_types_list:
            header_params["Content-Type"] = content_types_list

        # Authentication setting
        auth_settings = []

        response_types_map = {
            200: "BatchCheckResponse",
            400: "ValidationErrorMessageResponse",
            401: "UnauthenticatedResponse",
            403: "ForbiddenResponse",
            404: "PathUnknownErrorMessageResponse",
            409: "AbortedMessageResponse",
            422: "UnprocessableContentMessageResponse",
            500: "InternalErrorMessageResponse",
        }

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "batch_check",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return await self.api_client.call_api(
            "/stores/{store_id}/batch-check".replace("{store_id}", store_id),
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get("_return_http_data_only"),
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            _retry_params=local_var_params.get("_retry_params"),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get("_request_auth"),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )

    async def check(self, body, **kwargs):
        """Check whether a user is authorized to access an object

        The Check API returns whether a given user has a relationship with a given object in a given store. The `user` field of the request can be a specific target, such as `user:anne`, or a userset (set of users) such as `group:marketing#member` or a type-bound public access `user:*`. To arrive at a result, the API uses: an authorization model, explicit tuples written through the Write API, contextual tuples present in the request, and implicit tuples that exist by virtue of applying set theory (such as `document:2021-budget#viewer@document:2021-budget#viewer`; the set of users who are viewers of `document:2021-budget` are the set of users who are the viewers of `document:2021-budget`). A `contextual_tuples` object may also be included in the body of the request. This object contains one field `tuple_keys`, which is an array of tuple keys. Each of these tuples may have an associated `condition`. You may also provide an `authorization_model_id` in the body. This will be used to assert that the input `tuple_key` is valid for the model specified. If not specified, the assertion will be made against the latest authorization model ID. It is strongly recommended to specify authorization model id for better performance. You may also provide a `context` object that will be used to evaluate the conditioned tuples in the system. It is strongly recommended to provide a value for all the input parameters of all the conditions, to ensure that all tuples be evaluated correctly. By default, the Check API caches results for a short time to optimize performance. You may specify a value of `HIGHER_CONSISTENCY` for the optional `consistency` parameter in the body to inform the server that higher conisistency is preferred at the expense of increased latency. Consideration should be given to the increased latency if requesting higher consistency. The response will return whether the relationship exists in the field `allowed`.  Some exceptions apply, but in general, if a Check API responds with `{allowed: true}`, then you can expect the equivalent ListObjects query to return the object, and viceversa.  For example, if `Check(user:anne, reader, document:2021-budget)` responds with `{allowed: true}`, then `ListObjects(user:anne, reader, document)` may include `document:2021-budget` in the response. ## Examples ### Querying with contextual tuples In order to check if user `user:anne` of type `user` has a `reader` relationship with object `document:2021-budget` given the following contextual tuple ```json {   \"user\": \"user:anne\",   \"relation\": \"member\",   \"object\": \"time_slot:office_hours\" } ``` the Check API can be used with the following request body: ```json {   \"tuple_key\": {     \"user\": \"user:anne\",     \"relation\": \"reader\",     \"object\": \"document:2021-budget\"   },   \"contextual_tuples\": {     \"tuple_keys\": [       {         \"user\": \"user:anne\",         \"relation\": \"member\",         \"object\": \"time_slot:office_hours\"       }     ]   },   \"authorization_model_id\": \"01G50QVV17PECNVAHX1GG4Y5NC\" } ``` ### Querying usersets Some Checks will always return `true`, even without any tuples. For example, for the following authorization model ```python model   schema 1.1 type user type document   relations     define reader: [user] ``` the following query ```json {   \"tuple_key\": {      \"user\": \"document:2021-budget#reader\",      \"relation\": \"reader\",      \"object\": \"document:2021-budget\"   } } ``` will always return `{ \"allowed\": true }`. This is because usersets are self-defining: the userset `document:2021-budget#reader` will always have the `reader` relation with `document:2021-budget`. ### Querying usersets with difference in the model A Check for a userset can yield results that must be treated carefully if the model involves difference. For example, for the following authorization model ```python model   schema 1.1 type user type group   relations     define member: [user] type document   relations     define blocked: [user]     define reader: [group#member] but not blocked ``` the following query ```json {   \"tuple_key\": {      \"user\": \"group:finance#member\",      \"relation\": \"reader\",      \"object\": \"document:2021-budget\"   },   \"contextual_tuples\": {     \"tuple_keys\": [       {         \"user\": \"user:anne\",         \"relation\": \"member\",         \"object\": \"group:finance\"       },       {         \"user\": \"group:finance#member\",         \"relation\": \"reader\",         \"object\": \"document:2021-budget\"       },       {         \"user\": \"user:anne\",         \"relation\": \"blocked\",         \"object\": \"document:2021-budget\"       }     ]   }, } ``` will return `{ \"allowed\": true }`, even though a specific user of the userset `group:finance#member` does not have the `reader` relationship with the given object. ### Requesting higher consistency By default, the Check API caches results for a short time to optimize performance. You may request higher consistency to inform the server that higher consistency should be preferred at the expense of increased latency. Care should be taken when requesting higher consistency due to the increased latency. ```json {   \"tuple_key\": {      \"user\": \"group:finance#member\",      \"relation\": \"reader\",      \"object\": \"document:2021-budget\"   },   \"consistency\": \"HIGHER_CONSISTENCY\" } ```

        >>> thread = await api.check(body)

        :param body: (required)
        :type body: CheckRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CheckResponse
        """
        kwargs["_return_http_data_only"] = True
        return await self.check_with_http_info(body, **kwargs)

    async def check_with_http_info(self, body, **kwargs):
        """Check whether a user is authorized to access an object

        The Check API returns whether a given user has a relationship with a given object in a given store. The `user` field of the request can be a specific target, such as `user:anne`, or a userset (set of users) such as `group:marketing#member` or a type-bound public access `user:*`. To arrive at a result, the API uses: an authorization model, explicit tuples written through the Write API, contextual tuples present in the request, and implicit tuples that exist by virtue of applying set theory (such as `document:2021-budget#viewer@document:2021-budget#viewer`; the set of users who are viewers of `document:2021-budget` are the set of users who are the viewers of `document:2021-budget`). A `contextual_tuples` object may also be included in the body of the request. This object contains one field `tuple_keys`, which is an array of tuple keys. Each of these tuples may have an associated `condition`. You may also provide an `authorization_model_id` in the body. This will be used to assert that the input `tuple_key` is valid for the model specified. If not specified, the assertion will be made against the latest authorization model ID. It is strongly recommended to specify authorization model id for better performance. You may also provide a `context` object that will be used to evaluate the conditioned tuples in the system. It is strongly recommended to provide a value for all the input parameters of all the conditions, to ensure that all tuples be evaluated correctly. By default, the Check API caches results for a short time to optimize performance. You may specify a value of `HIGHER_CONSISTENCY` for the optional `consistency` parameter in the body to inform the server that higher conisistency is preferred at the expense of increased latency. Consideration should be given to the increased latency if requesting higher consistency. The response will return whether the relationship exists in the field `allowed`.  Some exceptions apply, but in general, if a Check API responds with `{allowed: true}`, then you can expect the equivalent ListObjects query to return the object, and viceversa.  For example, if `Check(user:anne, reader, document:2021-budget)` responds with `{allowed: true}`, then `ListObjects(user:anne, reader, document)` may include `document:2021-budget` in the response. ## Examples ### Querying with contextual tuples In order to check if user `user:anne` of type `user` has a `reader` relationship with object `document:2021-budget` given the following contextual tuple ```json {   \"user\": \"user:anne\",   \"relation\": \"member\",   \"object\": \"time_slot:office_hours\" } ``` the Check API can be used with the following request body: ```json {   \"tuple_key\": {     \"user\": \"user:anne\",     \"relation\": \"reader\",     \"object\": \"document:2021-budget\"   },   \"contextual_tuples\": {     \"tuple_keys\": [       {         \"user\": \"user:anne\",         \"relation\": \"member\",         \"object\": \"time_slot:office_hours\"       }     ]   },   \"authorization_model_id\": \"01G50QVV17PECNVAHX1GG4Y5NC\" } ``` ### Querying usersets Some Checks will always return `true`, even without any tuples. For example, for the following authorization model ```python model   schema 1.1 type user type document   relations     define reader: [user] ``` the following query ```json {   \"tuple_key\": {      \"user\": \"document:2021-budget#reader\",      \"relation\": \"reader\",      \"object\": \"document:2021-budget\"   } } ``` will always return `{ \"allowed\": true }`. This is because usersets are self-defining: the userset `document:2021-budget#reader` will always have the `reader` relation with `document:2021-budget`. ### Querying usersets with difference in the model A Check for a userset can yield results that must be treated carefully if the model involves difference. For example, for the following authorization model ```python model   schema 1.1 type user type group   relations     define member: [user] type document   relations     define blocked: [user]     define reader: [group#member] but not blocked ``` the following query ```json {   \"tuple_key\": {      \"user\": \"group:finance#member\",      \"relation\": \"reader\",      \"object\": \"document:2021-budget\"   },   \"contextual_tuples\": {     \"tuple_keys\": [       {         \"user\": \"user:anne\",         \"relation\": \"member\",         \"object\": \"group:finance\"       },       {         \"user\": \"group:finance#member\",         \"relation\": \"reader\",         \"object\": \"document:2021-budget\"       },       {         \"user\": \"user:anne\",         \"relation\": \"blocked\",         \"object\": \"document:2021-budget\"       }     ]   }, } ``` will return `{ \"allowed\": true }`, even though a specific user of the userset `group:finance#member` does not have the `reader` relationship with the given object. ### Requesting higher consistency By default, the Check API caches results for a short time to optimize performance. You may request higher consistency to inform the server that higher consistency should be preferred at the expense of increased latency. Care should be taken when requesting higher consistency due to the increased latency. ```json {   \"tuple_key\": {      \"user\": \"group:finance#member\",      \"relation\": \"reader\",      \"object\": \"document:2021-budget\"   },   \"consistency\": \"HIGHER_CONSISTENCY\" } ```

        >>> thread = api.check_with_http_info(body)

        :param body: (required)
        :type body: CheckRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CheckResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = ["body"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method check"
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'body' is set
        if (
            self.api_client.client_side_validation
            and local_var_params.get("body") is None
        ):
            raise ApiValueError(
                "Missing the required parameter `body` when calling `check`"
            )

        collection_formats = {}

        path_params = {}

        store_id = None

        if self.api_client._get_store_id() is None:
            raise ApiValueError(
                "Store ID expected in api_client's configuration when calling `check`"
            )
        store_id = self.api_client._get_store_id()

        query_params = []

        header_params = dict(local_var_params.get("_headers", {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in local_var_params:
            body_params = local_var_params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                ["application/json"], "POST", body_params
            ),
        )
        if content_types_list:
            header_params["Content-Type"] = content_types_list

        # Authentication setting
        auth_settings = []

        response_types_map = {
            200: "CheckResponse",
            400: "ValidationErrorMessageResponse",
            401: "UnauthenticatedResponse",
            403: "ForbiddenResponse",
            404: "PathUnknownErrorMessageResponse",
            409: "AbortedMessageResponse",
            422: "UnprocessableContentMessageResponse",
            500: "InternalErrorMessageResponse",
        }

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "check",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return await self.api_client.call_api(
            "/stores/{store_id}/check".replace("{store_id}", store_id),
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get("_return_http_data_only"),
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            _retry_params=local_var_params.get("_retry_params"),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get("_request_auth"),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )

    async def create_store(self, body, **kwargs):
        """Create a store

        Create a unique OpenFGA store which will be used to store authorization models and relationship tuples.

        >>> thread = await api.create_store(body)

        :param body: (required)
        :type body: CreateStoreRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateStoreResponse
        """
        kwargs["_return_http_data_only"] = True
        return await self.create_store_with_http_info(body, **kwargs)

    async def create_store_with_http_info(self, body, **kwargs):
        """Create a store

        Create a unique OpenFGA store which will be used to store authorization models and relationship tuples.

        >>> thread = api.create_store_with_http_info(body)

        :param body: (required)
        :type body: CreateStoreRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateStoreResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = ["body"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method create_store"
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]

        collection_formats = {}

        path_params = {}

        store_id = None

        query_params = []

        header_params = dict(local_var_params.get("_headers", {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in local_var_params:
            body_params = local_var_params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                ["application/json"], "POST", body_params
            ),
        )
        if content_types_list:
            header_params["Content-Type"] = content_types_list

        # Authentication setting
        auth_settings = []

        response_types_map = {
            201: "CreateStoreResponse",
            400: "ValidationErrorMessageResponse",
            401: "UnauthenticatedResponse",
            403: "ForbiddenResponse",
            404: "PathUnknownErrorMessageResponse",
            409: "AbortedMessageResponse",
            422: "UnprocessableContentMessageResponse",
            500: "InternalErrorMessageResponse",
        }

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "create_store",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return await self.api_client.call_api(
            "/stores",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get("_return_http_data_only"),
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            _retry_params=local_var_params.get("_retry_params"),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get("_request_auth"),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )

    async def delete_store(self, **kwargs):
        """Delete a store

        Delete an OpenFGA store. This does not delete the data associated with the store, like tuples or authorization models.

        >>> thread = await api.delete_store()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        return await self.delete_store_with_http_info(**kwargs)

    async def delete_store_with_http_info(self, **kwargs):
        """Delete a store

        Delete an OpenFGA store. This does not delete the data associated with the store, like tuples or authorization models.

        >>> thread = api.delete_store_with_http_info()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = []
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method delete_store"
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]

        collection_formats = {}

        path_params = {}

        store_id = None

        if self.api_client._get_store_id() is None:
            raise ApiValueError(
                "Store ID expected in api_client's configuration when calling `delete_store`"
            )
        store_id = self.api_client._get_store_id()

        query_params = []

        header_params = dict(local_var_params.get("_headers", {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # Authentication setting
        auth_settings = []

        response_types_map = {}

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "delete_store",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return await self.api_client.call_api(
            "/stores/{store_id}".replace("{store_id}", store_id),
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get("_return_http_data_only"),
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            _retry_params=local_var_params.get("_retry_params"),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get("_request_auth"),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )

    async def expand(self, body, **kwargs):
        """Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship

        The Expand API will return all users and usersets that have certain relationship with an object in a certain store. This is different from the `/stores/{store_id}/read` API in that both users and computed usersets are returned. Body parameters `tuple_key.object` and `tuple_key.relation` are all required. A `contextual_tuples` object may also be included in the body of the request. This object contains one field `tuple_keys`, which is an array of tuple keys. Each of these tuples may have an associated `condition`. The response will return a tree whose leaves are the specific users and usersets. Union, intersection and difference operator are located in the intermediate nodes.  ## Example To expand all users that have the `reader` relationship with object `document:2021-budget`, use the Expand API with the following request body ```json {   \"tuple_key\": {     \"object\": \"document:2021-budget\",     \"relation\": \"reader\"   },   \"authorization_model_id\": \"01G50QVV17PECNVAHX1GG4Y5NC\" } ``` OpenFGA's response will be a userset tree of the users and usersets that have read access to the document. ```json {   \"tree\":{     \"root\":{       \"type\":\"document:2021-budget#reader\",       \"union\":{         \"nodes\":[           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"users\":{                 \"users\":[                   \"user:bob\"                 ]               }             }           },           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"computed\":{                 \"userset\":\"document:2021-budget#writer\"               }             }           }         ]       }     }   } } ``` The caller can then call expand API for the `writer` relationship for the `document:2021-budget`. ### Expand Request with Contextual Tuples  Given the model ```python model     schema 1.1  type user  type folder     relations         define owner: [user]  type document     relations         define parent: [folder]         define viewer: [user] or writer         define writer: [user] or owner from parent ``` and the initial tuples ```json [{     \"user\": \"user:bob\",     \"relation\": \"owner\",     \"object\": \"folder:1\" }] ```  To expand all `writers` of `document:1` when `document:1` is put in `folder:1`, the first call could be  ```json {   \"tuple_key\": {     \"object\": \"document:1\",     \"relation\": \"writer\"   },   \"contextual_tuples\": {     \"tuple_keys\": [       {         \"user\": \"folder:1\",         \"relation\": \"parent\",         \"object\": \"document:1\"       }     ]   } } ``` this returns: ```json {   \"tree\": {     \"root\": {       \"name\": \"document:1#writer\",       \"union\": {         \"nodes\": [           {             \"name\": \"document:1#writer\",             \"leaf\": {               \"users\": {                 \"users\": []               }             }           },           {             \"name\": \"document:1#writer\",             \"leaf\": {               \"tupleToUserset\": {                 \"tupleset\": \"document:1#parent\",                 \"computed\": [                   {                     \"userset\": \"folder:1#owner\"                   }                 ]               }             }           }         ]       }     }   } } ``` This tells us that the `owner` of `folder:1` may also be a writer. So our next call could be to find the `owners` of `folder:1` ```json {   \"tuple_key\": {     \"object\": \"folder:1\",     \"relation\": \"owner\"   } } ``` which gives ```json {   \"tree\": {     \"root\": {       \"name\": \"folder:1#owner\",       \"leaf\": {         \"users\": {           \"users\": [             \"user:bob\"           ]         }       }     }   } } ```

        >>> thread = await api.expand(body)

        :param body: (required)
        :type body: ExpandRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExpandResponse
        """
        kwargs["_return_http_data_only"] = True
        return await self.expand_with_http_info(body, **kwargs)

    async def expand_with_http_info(self, body, **kwargs):
        """Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship

        The Expand API will return all users and usersets that have certain relationship with an object in a certain store. This is different from the `/stores/{store_id}/read` API in that both users and computed usersets are returned. Body parameters `tuple_key.object` and `tuple_key.relation` are all required. A `contextual_tuples` object may also be included in the body of the request. This object contains one field `tuple_keys`, which is an array of tuple keys. Each of these tuples may have an associated `condition`. The response will return a tree whose leaves are the specific users and usersets. Union, intersection and difference operator are located in the intermediate nodes.  ## Example To expand all users that have the `reader` relationship with object `document:2021-budget`, use the Expand API with the following request body ```json {   \"tuple_key\": {     \"object\": \"document:2021-budget\",     \"relation\": \"reader\"   },   \"authorization_model_id\": \"01G50QVV17PECNVAHX1GG4Y5NC\" } ``` OpenFGA's response will be a userset tree of the users and usersets that have read access to the document. ```json {   \"tree\":{     \"root\":{       \"type\":\"document:2021-budget#reader\",       \"union\":{         \"nodes\":[           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"users\":{                 \"users\":[                   \"user:bob\"                 ]               }             }           },           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"computed\":{                 \"userset\":\"document:2021-budget#writer\"               }             }           }         ]       }     }   } } ``` The caller can then call expand API for the `writer` relationship for the `document:2021-budget`. ### Expand Request with Contextual Tuples  Given the model ```python model     schema 1.1  type user  type folder     relations         define owner: [user]  type document     relations         define parent: [folder]         define viewer: [user] or writer         define writer: [user] or owner from parent ``` and the initial tuples ```json [{     \"user\": \"user:bob\",     \"relation\": \"owner\",     \"object\": \"folder:1\" }] ```  To expand all `writers` of `document:1` when `document:1` is put in `folder:1`, the first call could be  ```json {   \"tuple_key\": {     \"object\": \"document:1\",     \"relation\": \"writer\"   },   \"contextual_tuples\": {     \"tuple_keys\": [       {         \"user\": \"folder:1\",         \"relation\": \"parent\",         \"object\": \"document:1\"       }     ]   } } ``` this returns: ```json {   \"tree\": {     \"root\": {       \"name\": \"document:1#writer\",       \"union\": {         \"nodes\": [           {             \"name\": \"document:1#writer\",             \"leaf\": {               \"users\": {                 \"users\": []               }             }           },           {             \"name\": \"document:1#writer\",             \"leaf\": {               \"tupleToUserset\": {                 \"tupleset\": \"document:1#parent\",                 \"computed\": [                   {                     \"userset\": \"folder:1#owner\"                   }                 ]               }             }           }         ]       }     }   } } ``` This tells us that the `owner` of `folder:1` may also be a writer. So our next call could be to find the `owners` of `folder:1` ```json {   \"tuple_key\": {     \"object\": \"folder:1\",     \"relation\": \"owner\"   } } ``` which gives ```json {   \"tree\": {     \"root\": {       \"name\": \"folder:1#owner\",       \"leaf\": {         \"users\": {           \"users\": [             \"user:bob\"           ]         }       }     }   } } ```

        >>> thread = api.expand_with_http_info(body)

        :param body: (required)
        :type body: ExpandRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExpandResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = ["body"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method expand"
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'body' is set
        if (
            self.api_client.client_side_validation
            and local_var_params.get("body") is None
        ):
            raise ApiValueError(
                "Missing the required parameter `body` when calling `expand`"
            )

        collection_formats = {}

        path_params = {}

        store_id = None

        if self.api_client._get_store_id() is None:
            raise ApiValueError(
                "Store ID expected in api_client's configuration when calling `expand`"
            )
        store_id = self.api_client._get_store_id()

        query_params = []

        header_params = dict(local_var_params.get("_headers", {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in local_var_params:
            body_params = local_var_params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                ["application/json"], "POST", body_params
            ),
        )
        if content_types_list:
            header_params["Content-Type"] = content_types_list

        # Authentication setting
        auth_settings = []

        response_types_map = {
            200: "ExpandResponse",
            400: "ValidationErrorMessageResponse",
            401: "UnauthenticatedResponse",
            403: "ForbiddenResponse",
            404: "PathUnknownErrorMessageResponse",
            409: "AbortedMessageResponse",
            422: "UnprocessableContentMessageResponse",
            500: "InternalErrorMessageResponse",
        }

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "expand",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return await self.api_client.call_api(
            "/stores/{store_id}/expand".replace("{store_id}", store_id),
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get("_return_http_data_only"),
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            _retry_params=local_var_params.get("_retry_params"),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get("_request_auth"),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )

    async def get_store(self, **kwargs):
        """Get a store

        Returns an OpenFGA store by its identifier

        >>> thread = await api.get_store()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetStoreResponse
        """
        kwargs["_return_http_data_only"] = True
        return await self.get_store_with_http_info(**kwargs)

    async def get_store_with_http_info(self, **kwargs):
        """Get a store

        Returns an OpenFGA store by its identifier

        >>> thread = api.get_store_with_http_info()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetStoreResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = []
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method get_store"
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]

        collection_formats = {}

        path_params = {}

        store_id = None

        if self.api_client._get_store_id() is None:
            raise ApiValueError(
                "Store ID expected in api_client's configuration when calling `get_store`"
            )
        store_id = self.api_client._get_store_id()

        query_params = []

        header_params = dict(local_var_params.get("_headers", {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # Authentication setting
        auth_settings = []

        response_types_map = {
            200: "GetStoreResponse",
            400: "ValidationErrorMessageResponse",
            401: "UnauthenticatedResponse",
            403: "ForbiddenResponse",
            404: "PathUnknownErrorMessageResponse",
            409: "AbortedMessageResponse",
            422: "UnprocessableContentMessageResponse",
            500: "InternalErrorMessageResponse",
        }

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "get_store",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return await self.api_client.call_api(
            "/stores/{store_id}".replace("{store_id}", store_id),
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get("_return_http_data_only"),
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            _retry_params=local_var_params.get("_retry_params"),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get("_request_auth"),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )

    async def list_objects(self, body, **kwargs):
        """List all objects of the given type that the user has a relation with

        The ListObjects API returns a list of all the objects of the given type that the user has a relation with.  To arrive at a result, the API uses: an authorization model, explicit tuples written through the Write API, contextual tuples present in the request, and implicit tuples that exist by virtue of applying set theory (such as `document:2021-budget#viewer@document:2021-budget#viewer`; the set of users who are viewers of `document:2021-budget` are the set of users who are the viewers of `document:2021-budget`). An `authorization_model_id` may be specified in the body. If it is not specified, the latest authorization model ID will be used. It is strongly recommended to specify authorization model id for better performance. You may also specify `contextual_tuples` that will be treated as regular tuples. Each of these tuples may have an associated `condition`. You may also provide a `context` object that will be used to evaluate the conditioned tuples in the system. It is strongly recommended to provide a value for all the input parameters of all the conditions, to ensure that all tuples be evaluated correctly. By default, the Check API caches results for a short time to optimize performance. You may specify a value of `HIGHER_CONSISTENCY` for the optional `consistency` parameter in the body to inform the server that higher conisistency is preferred at the expense of increased latency. Consideration should be given to the increased latency if requesting higher consistency. The response will contain the related objects in an array in the \"objects\" field of the response and they will be strings in the object format `<type>:<id>` (e.g. \"document:roadmap\"). The number of objects in the response array will be limited by the execution timeout specified in the flag OPENFGA_LIST_OBJECTS_DEADLINE and by the upper bound specified in the flag OPENFGA_LIST_OBJECTS_MAX_RESULTS, whichever is hit first. The objects given will not be sorted, and therefore two identical calls can give a given different set of objects.

        >>> thread = await api.list_objects(body)

        :param body: (required)
        :type body: ListObjectsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListObjectsResponse
        """
        kwargs["_return_http_data_only"] = True
        return await self.list_objects_with_http_info(body, **kwargs)

    async def list_objects_with_http_info(self, body, **kwargs):
        """List all objects of the given type that the user has a relation with

        The ListObjects API returns a list of all the objects of the given type that the user has a relation with.  To arrive at a result, the API uses: an authorization model, explicit tuples written through the Write API, contextual tuples present in the request, and implicit tuples that exist by virtue of applying set theory (such as `document:2021-budget#viewer@document:2021-budget#viewer`; the set of users who are viewers of `document:2021-budget` are the set of users who are the viewers of `document:2021-budget`). An `authorization_model_id` may be specified in the body. If it is not specified, the latest authorization model ID will be used. It is strongly recommended to specify authorization model id for better performance. You may also specify `contextual_tuples` that will be treated as regular tuples. Each of these tuples may have an associated `condition`. You may also provide a `context` object that will be used to evaluate the conditioned tuples in the system. It is strongly recommended to provide a value for all the input parameters of all the conditions, to ensure that all tuples be evaluated correctly. By default, the Check API caches results for a short time to optimize performance. You may specify a value of `HIGHER_CONSISTENCY` for the optional `consistency` parameter in the body to inform the server that higher conisistency is preferred at the expense of increased latency. Consideration should be given to the increased latency if requesting higher consistency. The response will contain the related objects in an array in the \"objects\" field of the response and they will be strings in the object format `<type>:<id>` (e.g. \"document:roadmap\"). The number of objects in the response array will be limited by the execution timeout specified in the flag OPENFGA_LIST_OBJECTS_DEADLINE and by the upper bound specified in the flag OPENFGA_LIST_OBJECTS_MAX_RESULTS, whichever is hit first. The objects given will not be sorted, and therefore two identical calls can give a given different set of objects.

        >>> thread = api.list_objects_with_http_info(body)

        :param body: (required)
        :type body: ListObjectsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListObjectsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = ["body"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method list_objects"
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'body' is set
        if (
            self.api_client.client_side_validation
            and local_var_params.get("body") is None
        ):
            raise ApiValueError(
                "Missing the required parameter `body` when calling `list_objects`"
            )

        collection_formats = {}

        path_params = {}

        store_id = None

        if self.api_client._get_store_id() is None:
            raise ApiValueError(
                "Store ID expected in api_client's configuration when calling `list_objects`"
            )
        store_id = self.api_client._get_store_id()

        query_params = []

        header_params = dict(local_var_params.get("_headers", {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in local_var_params:
            body_params = local_var_params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                ["application/json"], "POST", body_params
            ),
        )
        if content_types_list:
            header_params["Content-Type"] = content_types_list

        # Authentication setting
        auth_settings = []

        response_types_map = {
            200: "ListObjectsResponse",
            400: "ValidationErrorMessageResponse",
            401: "UnauthenticatedResponse",
            403: "ForbiddenResponse",
            404: "PathUnknownErrorMessageResponse",
            409: "AbortedMessageResponse",
            422: "UnprocessableContentMessageResponse",
            500: "InternalErrorMessageResponse",
        }

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "list_objects",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return await self.api_client.call_api(
            "/stores/{store_id}/list-objects".replace("{store_id}", store_id),
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get("_return_http_data_only"),
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            _retry_params=local_var_params.get("_retry_params"),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get("_request_auth"),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )

    async def list_stores(self, **kwargs):
        """List all stores

        Returns a paginated list of OpenFGA stores and a continuation token to get additional stores. The continuation token will be empty if there are no more stores.

        >>> thread = await api.list_stores()

        :param page_size:(optional)
        :type page_size: int, optional
        :param continuation_token:(optional)
        :type continuation_token: str, optional
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListStoresResponse
        """
        kwargs["_return_http_data_only"] = True
        return await self.list_stores_with_http_info(**kwargs)

    async def list_stores_with_http_info(self, **kwargs):
        """List all stores

        Returns a paginated list of OpenFGA stores and a continuation token to get additional stores. The continuation token will be empty if there are no more stores.

        >>> thread = api.list_stores_with_http_info()

        :param page_size:(optional)
        :type page_size: int, optional
        :param continuation_token:(optional)
        :type continuation_token: str, optional
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListStoresResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = ["page_size", "continuation_token"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method list_stores"
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]

        collection_formats = {}

        path_params = {}

        store_id = None

        query_params = []
        if local_var_params.get("page_size") is not None:
            query_params.append(("page_size", local_var_params["page_size"]))
        if local_var_params.get("continuation_token") is not None:
            query_params.append(
                ("continuation_token", local_var_params["continuation_token"])
            )

        header_params = dict(local_var_params.get("_headers", {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # Authentication setting
        auth_settings = []

        response_types_map = {
            200: "ListStoresResponse",
            400: "ValidationErrorMessageResponse",
            401: "UnauthenticatedResponse",
            403: "ForbiddenResponse",
            404: "PathUnknownErrorMessageResponse",
            409: "AbortedMessageResponse",
            422: "UnprocessableContentMessageResponse",
            500: "InternalErrorMessageResponse",
        }

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "list_stores",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return await self.api_client.call_api(
            "/stores",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get("_return_http_data_only"),
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            _retry_params=local_var_params.get("_retry_params"),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get("_request_auth"),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )

    async def list_users(self, body, **kwargs):
        """List the users matching the provided filter who have a certain relation to a particular type.

        The ListUsers API returns a list of all the users of a specific type that have a relation to a given object.  To arrive at a result, the API uses: an authorization model, explicit tuples written through the Write API, contextual tuples present in the request, and implicit tuples that exist by virtue of applying set theory (such as `document:2021-budget#viewer@document:2021-budget#viewer`; the set of users who are viewers of `document:2021-budget` are the set of users who are the viewers of `document:2021-budget`). An `authorization_model_id` may be specified in the body. If it is not specified, the latest authorization model ID will be used. It is strongly recommended to specify authorization model id for better performance. You may also specify `contextual_tuples` that will be treated as regular tuples. Each of these tuples may have an associated `condition`. You may also provide a `context` object that will be used to evaluate the conditioned tuples in the system. It is strongly recommended to provide a value for all the input parameters of all the conditions, to ensure that all tuples be evaluated correctly. The response will contain the related users in an array in the \"users\" field of the response. These results may include specific objects, usersets  or type-bound public access. Each of these types of results is encoded in its own type and not represented as a string.In cases where a type-bound public access result is returned (e.g. `user:*`), it cannot be inferred that all subjects of that type have a relation to the object; it is possible that negations exist and checks should still be queried on individual subjects to ensure access to that document.The number of users in the response array will be limited by the execution timeout specified in the flag OPENFGA_LIST_USERS_DEADLINE and by the upper bound specified in the flag OPENFGA_LIST_USERS_MAX_RESULTS, whichever is hit first. The returned users will not be sorted, and therefore two identical calls may yield different sets of users.

        >>> thread = await api.list_users(body)

        :param body: (required)
        :type body: ListUsersRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListUsersResponse
        """
        kwargs["_return_http_data_only"] = True
        return await self.list_users_with_http_info(body, **kwargs)

    async def list_users_with_http_info(self, body, **kwargs):
        """List the users matching the provided filter who have a certain relation to a particular type.

        The ListUsers API returns a list of all the users of a specific type that have a relation to a given object.  To arrive at a result, the API uses: an authorization model, explicit tuples written through the Write API, contextual tuples present in the request, and implicit tuples that exist by virtue of applying set theory (such as `document:2021-budget#viewer@document:2021-budget#viewer`; the set of users who are viewers of `document:2021-budget` are the set of users who are the viewers of `document:2021-budget`). An `authorization_model_id` may be specified in the body. If it is not specified, the latest authorization model ID will be used. It is strongly recommended to specify authorization model id for better performance. You may also specify `contextual_tuples` that will be treated as regular tuples. Each of these tuples may have an associated `condition`. You may also provide a `context` object that will be used to evaluate the conditioned tuples in the system. It is strongly recommended to provide a value for all the input parameters of all the conditions, to ensure that all tuples be evaluated correctly. The response will contain the related users in an array in the \"users\" field of the response. These results may include specific objects, usersets  or type-bound public access. Each of these types of results is encoded in its own type and not represented as a string.In cases where a type-bound public access result is returned (e.g. `user:*`), it cannot be inferred that all subjects of that type have a relation to the object; it is possible that negations exist and checks should still be queried on individual subjects to ensure access to that document.The number of users in the response array will be limited by the execution timeout specified in the flag OPENFGA_LIST_USERS_DEADLINE and by the upper bound specified in the flag OPENFGA_LIST_USERS_MAX_RESULTS, whichever is hit first. The returned users will not be sorted, and therefore two identical calls may yield different sets of users.

        >>> thread = api.list_users_with_http_info(body)

        :param body: (required)
        :type body: ListUsersRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListUsersResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = ["body"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method list_users"
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'body' is set
        if (
            self.api_client.client_side_validation
            and local_var_params.get("body") is None
        ):
            raise ApiValueError(
                "Missing the required parameter `body` when calling `list_users`"
            )

        collection_formats = {}

        path_params = {}

        store_id = None

        if self.api_client._get_store_id() is None:
            raise ApiValueError(
                "Store ID expected in api_client's configuration when calling `list_users`"
            )
        store_id = self.api_client._get_store_id()

        query_params = []

        header_params = dict(local_var_params.get("_headers", {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in local_var_params:
            body_params = local_var_params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                ["application/json"], "POST", body_params
            ),
        )
        if content_types_list:
            header_params["Content-Type"] = content_types_list

        # Authentication setting
        auth_settings = []

        response_types_map = {
            200: "ListUsersResponse",
            400: "ValidationErrorMessageResponse",
            401: "UnauthenticatedResponse",
            403: "ForbiddenResponse",
            404: "PathUnknownErrorMessageResponse",
            409: "AbortedMessageResponse",
            422: "UnprocessableContentMessageResponse",
            500: "InternalErrorMessageResponse",
        }

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "list_users",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return await self.api_client.call_api(
            "/stores/{store_id}/list-users".replace("{store_id}", store_id),
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get("_return_http_data_only"),
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            _retry_params=local_var_params.get("_retry_params"),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get("_request_auth"),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )

    async def read(self, body, **kwargs):
        """Get tuples from the store that matches a query, without following userset rewrite rules

        The Read API will return the tuples for a certain store that match a query filter specified in the body of the request.  The API doesn't guarantee order by any field.  It is different from the `/stores/{store_id}/expand` API in that it only returns relationship tuples that are stored in the system and satisfy the query.  In the body: 1. `tuple_key` is optional. If not specified, it will return all tuples in the store. 2. `tuple_key.object` is mandatory if `tuple_key` is specified. It can be a full object (e.g., `type:object_id`) or type only (e.g., `type:`). 3. `tuple_key.user` is mandatory if tuple_key is specified in the case the `tuple_key.object` is a type only. ## Examples ### Query for all objects in a type definition To query for all objects that `user:bob` has `reader` relationship in the `document` type definition, call read API with body of ```json {  \"tuple_key\": {      \"user\": \"user:bob\",      \"relation\": \"reader\",      \"object\": \"document:\"   } } ``` The API will return tuples and a continuation token, something like ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"user:bob\",         \"relation\": \"reader\",         \"object\": \"document:2021-budget\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` This means that `user:bob` has a `reader` relationship with 1 document `document:2021-budget`. Note that this API, unlike the List Objects API, does not evaluate the tuples in the store. The continuation token will be empty if there are no more tuples to query. ### Query for all stored relationship tuples that have a particular relation and object To query for all users that have `reader` relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {      \"object\": \"document:2021-budget\",      \"relation\": \"reader\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"user:bob\",         \"relation\": \"reader\",         \"object\": \"document:2021-budget\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` This means that `document:2021-budget` has 1 `reader` (`user:bob`).  Note that, even if the model said that all `writers` are also `readers`, the API will not return writers such as `user:anne` because it only returns tuples and does not evaluate them. ### Query for all users with all relationships for a particular document To query for all users that have any relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {       \"object\": \"document:2021-budget\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"user:anne\",         \"relation\": \"writer\",         \"object\": \"document:2021-budget\"       },       \"timestamp\": \"2021-10-05T13:42:12.356Z\"     },     {       \"key\": {         \"user\": \"user:bob\",         \"relation\": \"reader\",         \"object\": \"document:2021-budget\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` This means that `document:2021-budget` has 1 `reader` (`user:bob`) and 1 `writer` (`user:anne`).

        >>> thread = await api.read(body)

        :param body: (required)
        :type body: ReadRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ReadResponse
        """
        kwargs["_return_http_data_only"] = True
        return await self.read_with_http_info(body, **kwargs)

    async def read_with_http_info(self, body, **kwargs):
        """Get tuples from the store that matches a query, without following userset rewrite rules

        The Read API will return the tuples for a certain store that match a query filter specified in the body of the request.  The API doesn't guarantee order by any field.  It is different from the `/stores/{store_id}/expand` API in that it only returns relationship tuples that are stored in the system and satisfy the query.  In the body: 1. `tuple_key` is optional. If not specified, it will return all tuples in the store. 2. `tuple_key.object` is mandatory if `tuple_key` is specified. It can be a full object (e.g., `type:object_id`) or type only (e.g., `type:`). 3. `tuple_key.user` is mandatory if tuple_key is specified in the case the `tuple_key.object` is a type only. ## Examples ### Query for all objects in a type definition To query for all objects that `user:bob` has `reader` relationship in the `document` type definition, call read API with body of ```json {  \"tuple_key\": {      \"user\": \"user:bob\",      \"relation\": \"reader\",      \"object\": \"document:\"   } } ``` The API will return tuples and a continuation token, something like ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"user:bob\",         \"relation\": \"reader\",         \"object\": \"document:2021-budget\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` This means that `user:bob` has a `reader` relationship with 1 document `document:2021-budget`. Note that this API, unlike the List Objects API, does not evaluate the tuples in the store. The continuation token will be empty if there are no more tuples to query. ### Query for all stored relationship tuples that have a particular relation and object To query for all users that have `reader` relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {      \"object\": \"document:2021-budget\",      \"relation\": \"reader\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"user:bob\",         \"relation\": \"reader\",         \"object\": \"document:2021-budget\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` This means that `document:2021-budget` has 1 `reader` (`user:bob`).  Note that, even if the model said that all `writers` are also `readers`, the API will not return writers such as `user:anne` because it only returns tuples and does not evaluate them. ### Query for all users with all relationships for a particular document To query for all users that have any relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {       \"object\": \"document:2021-budget\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"user:anne\",         \"relation\": \"writer\",         \"object\": \"document:2021-budget\"       },       \"timestamp\": \"2021-10-05T13:42:12.356Z\"     },     {       \"key\": {         \"user\": \"user:bob\",         \"relation\": \"reader\",         \"object\": \"document:2021-budget\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` This means that `document:2021-budget` has 1 `reader` (`user:bob`) and 1 `writer` (`user:anne`).

        >>> thread = api.read_with_http_info(body)

        :param body: (required)
        :type body: ReadRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ReadResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = ["body"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method read"
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'body' is set
        if (
            self.api_client.client_side_validation
            and local_var_params.get("body") is None
        ):
            raise ApiValueError(
                "Missing the required parameter `body` when calling `read`"
            )

        collection_formats = {}

        path_params = {}

        store_id = None

        if self.api_client._get_store_id() is None:
            raise ApiValueError(
                "Store ID expected in api_client's configuration when calling `read`"
            )
        store_id = self.api_client._get_store_id()

        query_params = []

        header_params = dict(local_var_params.get("_headers", {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in local_var_params:
            body_params = local_var_params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                ["application/json"], "POST", body_params
            ),
        )
        if content_types_list:
            header_params["Content-Type"] = content_types_list

        # Authentication setting
        auth_settings = []

        response_types_map = {
            200: "ReadResponse",
            400: "ValidationErrorMessageResponse",
            401: "UnauthenticatedResponse",
            403: "ForbiddenResponse",
            404: "PathUnknownErrorMessageResponse",
            409: "AbortedMessageResponse",
            422: "UnprocessableContentMessageResponse",
            500: "InternalErrorMessageResponse",
        }

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "read",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return await self.api_client.call_api(
            "/stores/{store_id}/read".replace("{store_id}", store_id),
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get("_return_http_data_only"),
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            _retry_params=local_var_params.get("_retry_params"),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get("_request_auth"),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )

    async def read_assertions(self, authorization_model_id, **kwargs):
        """Read assertions for an authorization model ID

        The ReadAssertions API will return, for a given authorization model id, all the assertions stored for it.

        >>> thread = await api.read_assertions(authorization_model_id)

        :param authorization_model_id: (required)
        :type authorization_model_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ReadAssertionsResponse
        """
        kwargs["_return_http_data_only"] = True
        return await self.read_assertions_with_http_info(
            authorization_model_id, **kwargs
        )

    async def read_assertions_with_http_info(self, authorization_model_id, **kwargs):
        """Read assertions for an authorization model ID

        The ReadAssertions API will return, for a given authorization model id, all the assertions stored for it.

        >>> thread = api.read_assertions_with_http_info(authorization_model_id)

        :param authorization_model_id: (required)
        :type authorization_model_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ReadAssertionsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = ["authorization_model_id"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method read_assertions"
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'authorization_model_id' is set
        if (
            self.api_client.client_side_validation
            and local_var_params.get("authorization_model_id") is None
        ):
            raise ApiValueError(
                "Missing the required parameter `authorization_model_id` when calling `read_assertions`"
            )

        collection_formats = {}

        path_params = {}

        store_id = None

        if self.api_client._get_store_id() is None:
            raise ApiValueError(
                "Store ID expected in api_client's configuration when calling `read_assertions`"
            )
        store_id = self.api_client._get_store_id()

        if "authorization_model_id" in local_var_params:
            path_params["authorization_model_id"] = local_var_params[
                "authorization_model_id"
            ]

        query_params = []

        header_params = dict(local_var_params.get("_headers", {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # Authentication setting
        auth_settings = []

        response_types_map = {
            200: "ReadAssertionsResponse",
            400: "ValidationErrorMessageResponse",
            401: "UnauthenticatedResponse",
            403: "ForbiddenResponse",
            404: "PathUnknownErrorMessageResponse",
            409: "AbortedMessageResponse",
            422: "UnprocessableContentMessageResponse",
            500: "InternalErrorMessageResponse",
        }

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "read_assertions",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return await self.api_client.call_api(
            "/stores/{store_id}/assertions/{authorization_model_id}".replace(
                "{store_id}", store_id
            ),
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get("_return_http_data_only"),
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            _retry_params=local_var_params.get("_retry_params"),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get("_request_auth"),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )

    async def read_authorization_model(self, id, **kwargs):
        """Return a particular version of an authorization model

        The ReadAuthorizationModel API returns an authorization model by its identifier. The response will return the authorization model for the particular version.  ## Example To retrieve the authorization model with ID `01G5JAVJ41T49E9TT3SKVS7X1J` for the store, call the GET authorization-models by ID API with `01G5JAVJ41T49E9TT3SKVS7X1J` as the `id` path parameter.  The API will return: ```json {   \"authorization_model\":{     \"id\":\"01G5JAVJ41T49E9TT3SKVS7X1J\",     \"type_definitions\":[       {         \"type\":\"user\"       },       {         \"type\":\"document\",         \"relations\":{           \"reader\":{             \"union\":{               \"child\":[                 {                   \"this\":{}                 },                 {                   \"computedUserset\":{                     \"object\":\"\",                     \"relation\":\"writer\"                   }                 }               ]             }           },           \"writer\":{             \"this\":{}           }         }       }     ]   } } ``` In the above example, there are 2 types (`user` and `document`). The `document` type has 2 relations (`writer` and `reader`).

        >>> thread = await api.read_authorization_model(id)

        :param id: (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ReadAuthorizationModelResponse
        """
        kwargs["_return_http_data_only"] = True
        return await self.read_authorization_model_with_http_info(id, **kwargs)

    async def read_authorization_model_with_http_info(self, id, **kwargs):
        """Return a particular version of an authorization model

        The ReadAuthorizationModel API returns an authorization model by its identifier. The response will return the authorization model for the particular version.  ## Example To retrieve the authorization model with ID `01G5JAVJ41T49E9TT3SKVS7X1J` for the store, call the GET authorization-models by ID API with `01G5JAVJ41T49E9TT3SKVS7X1J` as the `id` path parameter.  The API will return: ```json {   \"authorization_model\":{     \"id\":\"01G5JAVJ41T49E9TT3SKVS7X1J\",     \"type_definitions\":[       {         \"type\":\"user\"       },       {         \"type\":\"document\",         \"relations\":{           \"reader\":{             \"union\":{               \"child\":[                 {                   \"this\":{}                 },                 {                   \"computedUserset\":{                     \"object\":\"\",                     \"relation\":\"writer\"                   }                 }               ]             }           },           \"writer\":{             \"this\":{}           }         }       }     ]   } } ``` In the above example, there are 2 types (`user` and `document`). The `document` type has 2 relations (`writer` and `reader`).

        >>> thread = api.read_authorization_model_with_http_info(id)

        :param id: (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ReadAuthorizationModelResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = ["id"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method read_authorization_model"
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'id' is set
        if (
            self.api_client.client_side_validation
            and local_var_params.get("id") is None
        ):
            raise ApiValueError(
                "Missing the required parameter `id` when calling `read_authorization_model`"
            )

        collection_formats = {}

        path_params = {}

        store_id = None

        if self.api_client._get_store_id() is None:
            raise ApiValueError(
                "Store ID expected in api_client's configuration when calling `read_authorization_model`"
            )
        store_id = self.api_client._get_store_id()

        if "id" in local_var_params:
            path_params["id"] = local_var_params["id"]

        query_params = []

        header_params = dict(local_var_params.get("_headers", {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # Authentication setting
        auth_settings = []

        response_types_map = {
            200: "ReadAuthorizationModelResponse",
            400: "ValidationErrorMessageResponse",
            401: "UnauthenticatedResponse",
            403: "ForbiddenResponse",
            404: "PathUnknownErrorMessageResponse",
            409: "AbortedMessageResponse",
            422: "UnprocessableContentMessageResponse",
            500: "InternalErrorMessageResponse",
        }

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "read_authorization_model",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return await self.api_client.call_api(
            "/stores/{store_id}/authorization-models/{id}".replace(
                "{store_id}", store_id
            ),
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get("_return_http_data_only"),
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            _retry_params=local_var_params.get("_retry_params"),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get("_request_auth"),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )

    async def read_authorization_models(self, **kwargs):
        """Return all the authorization models for a particular store

        The ReadAuthorizationModels API will return all the authorization models for a certain store. OpenFGA's response will contain an array of all authorization models, sorted in descending order of creation.  ## Example Assume that a store's authorization model has been configured twice. To get all the authorization models that have been created in this store, call GET authorization-models. The API will return a response that looks like: ```json {   \"authorization_models\": [     {       \"id\": \"01G50QVV17PECNVAHX1GG4Y5NC\",       \"type_definitions\": [...]     },     {       \"id\": \"01G4ZW8F4A07AKQ8RHSVG9RW04\",       \"type_definitions\": [...]     },   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` If there are no more authorization models available, the `continuation_token` field will be empty ```json {   \"authorization_models\": [     {       \"id\": \"01G50QVV17PECNVAHX1GG4Y5NC\",       \"type_definitions\": [...]     },     {       \"id\": \"01G4ZW8F4A07AKQ8RHSVG9RW04\",       \"type_definitions\": [...]     },   ],   \"continuation_token\": \"\" } ```

        >>> thread = await api.read_authorization_models()

        :param page_size:(optional)
        :type page_size: int, optional
        :param continuation_token:(optional)
        :type continuation_token: str, optional
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ReadAuthorizationModelsResponse
        """
        kwargs["_return_http_data_only"] = True
        return await self.read_authorization_models_with_http_info(**kwargs)

    async def read_authorization_models_with_http_info(self, **kwargs):
        """Return all the authorization models for a particular store

        The ReadAuthorizationModels API will return all the authorization models for a certain store. OpenFGA's response will contain an array of all authorization models, sorted in descending order of creation.  ## Example Assume that a store's authorization model has been configured twice. To get all the authorization models that have been created in this store, call GET authorization-models. The API will return a response that looks like: ```json {   \"authorization_models\": [     {       \"id\": \"01G50QVV17PECNVAHX1GG4Y5NC\",       \"type_definitions\": [...]     },     {       \"id\": \"01G4ZW8F4A07AKQ8RHSVG9RW04\",       \"type_definitions\": [...]     },   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` If there are no more authorization models available, the `continuation_token` field will be empty ```json {   \"authorization_models\": [     {       \"id\": \"01G50QVV17PECNVAHX1GG4Y5NC\",       \"type_definitions\": [...]     },     {       \"id\": \"01G4ZW8F4A07AKQ8RHSVG9RW04\",       \"type_definitions\": [...]     },   ],   \"continuation_token\": \"\" } ```

        >>> thread = api.read_authorization_models_with_http_info()

        :param page_size:(optional)
        :type page_size: int, optional
        :param continuation_token:(optional)
        :type continuation_token: str, optional
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ReadAuthorizationModelsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = ["page_size", "continuation_token"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method read_authorization_models"
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]

        collection_formats = {}

        path_params = {}

        store_id = None

        if self.api_client._get_store_id() is None:
            raise ApiValueError(
                "Store ID expected in api_client's configuration when calling `read_authorization_models`"
            )
        store_id = self.api_client._get_store_id()

        query_params = []
        if local_var_params.get("page_size") is not None:
            query_params.append(("page_size", local_var_params["page_size"]))
        if local_var_params.get("continuation_token") is not None:
            query_params.append(
                ("continuation_token", local_var_params["continuation_token"])
            )

        header_params = dict(local_var_params.get("_headers", {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # Authentication setting
        auth_settings = []

        response_types_map = {
            200: "ReadAuthorizationModelsResponse",
            400: "ValidationErrorMessageResponse",
            401: "UnauthenticatedResponse",
            403: "ForbiddenResponse",
            404: "PathUnknownErrorMessageResponse",
            409: "AbortedMessageResponse",
            422: "UnprocessableContentMessageResponse",
            500: "InternalErrorMessageResponse",
        }

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "read_authorization_models",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return await self.api_client.call_api(
            "/stores/{store_id}/authorization-models".replace("{store_id}", store_id),
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get("_return_http_data_only"),
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            _retry_params=local_var_params.get("_retry_params"),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get("_request_auth"),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )

    async def read_changes(self, **kwargs):
        """Return a list of all the tuple changes

        The ReadChanges API will return a paginated list of tuple changes (additions and deletions) that occurred in a given store, sorted by ascending time. The response will include a continuation token that is used to get the next set of changes. If there are no changes after the provided continuation token, the same token will be returned in order for it to be used when new changes are recorded. If the store never had any tuples added or removed, this token will be empty. You can use the `type` parameter to only get the list of tuple changes that affect objects of that type. When reading a write tuple change, if it was conditioned, the condition will be returned. When reading a delete tuple change, the condition will NOT be returned regardless of whether it was originally conditioned or not.

        >>> thread = await api.read_changes()

        :param type:(optional)
        :type type: str, optional
        :param page_size:(optional)
        :type page_size: int, optional
        :param continuation_token:(optional)
        :type continuation_token: str, optional
        :param start_time: Start date and time of changes to read. Format: ISO 8601 timestamp (e.g., 2022-01-01T00:00:00Z) If a continuation_token is provided along side start_time, the continuation_token will take precedence over start_time.(optional)
        :type start_time: datetime, optional
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ReadChangesResponse
        """
        kwargs["_return_http_data_only"] = True
        return await self.read_changes_with_http_info(**kwargs)

    async def read_changes_with_http_info(self, **kwargs):
        """Return a list of all the tuple changes

        The ReadChanges API will return a paginated list of tuple changes (additions and deletions) that occurred in a given store, sorted by ascending time. The response will include a continuation token that is used to get the next set of changes. If there are no changes after the provided continuation token, the same token will be returned in order for it to be used when new changes are recorded. If the store never had any tuples added or removed, this token will be empty. You can use the `type` parameter to only get the list of tuple changes that affect objects of that type. When reading a write tuple change, if it was conditioned, the condition will be returned. When reading a delete tuple change, the condition will NOT be returned regardless of whether it was originally conditioned or not.

        >>> thread = api.read_changes_with_http_info()

        :param type:(optional)
        :type type: str, optional
        :param page_size:(optional)
        :type page_size: int, optional
        :param continuation_token:(optional)
        :type continuation_token: str, optional
        :param start_time: Start date and time of changes to read. Format: ISO 8601 timestamp (e.g., 2022-01-01T00:00:00Z) If a continuation_token is provided along side start_time, the continuation_token will take precedence over start_time.(optional)
        :type start_time: datetime, optional
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ReadChangesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = ["type", "page_size", "continuation_token", "start_time"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method read_changes"
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]

        collection_formats = {}

        path_params = {}

        store_id = None

        if self.api_client._get_store_id() is None:
            raise ApiValueError(
                "Store ID expected in api_client's configuration when calling `read_changes`"
            )
        store_id = self.api_client._get_store_id()

        query_params = []
        if local_var_params.get("type") is not None:
            query_params.append(("type", local_var_params["type"]))
        if local_var_params.get("page_size") is not None:
            query_params.append(("page_size", local_var_params["page_size"]))
        if local_var_params.get("continuation_token") is not None:
            query_params.append(
                ("continuation_token", local_var_params["continuation_token"])
            )
        if local_var_params.get("start_time") is not None:
            query_params.append(("start_time", local_var_params["start_time"]))

        header_params = dict(local_var_params.get("_headers", {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # Authentication setting
        auth_settings = []

        response_types_map = {
            200: "ReadChangesResponse",
            400: "ValidationErrorMessageResponse",
            401: "UnauthenticatedResponse",
            403: "ForbiddenResponse",
            404: "PathUnknownErrorMessageResponse",
            409: "AbortedMessageResponse",
            422: "UnprocessableContentMessageResponse",
            500: "InternalErrorMessageResponse",
        }

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "read_changes",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return await self.api_client.call_api(
            "/stores/{store_id}/changes".replace("{store_id}", store_id),
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get("_return_http_data_only"),
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            _retry_params=local_var_params.get("_retry_params"),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get("_request_auth"),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )

    async def streamed_list_objects(self, body, **kwargs):
        """Stream all objects of the given type that the user has a relation with

        The Streamed ListObjects API is very similar to the the ListObjects API, with two differences:  1. Instead of collecting all objects before returning a response, it streams them to the client as they are collected.  2. The number of results returned is only limited by the execution timeout specified in the flag OPENFGA_LIST_OBJECTS_DEADLINE.

        >>> thread = await api.streamed_list_objects(body)

        :param body: (required)
        :type body: ListObjectsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StreamResultOfStreamedListObjectsResponse
        """
        kwargs["_return_http_data_only"] = True
        return await self.streamed_list_objects_with_http_info(body, **kwargs)

    async def streamed_list_objects_with_http_info(self, body, **kwargs):
        """Stream all objects of the given type that the user has a relation with

        The Streamed ListObjects API is very similar to the the ListObjects API, with two differences:  1. Instead of collecting all objects before returning a response, it streams them to the client as they are collected.  2. The number of results returned is only limited by the execution timeout specified in the flag OPENFGA_LIST_OBJECTS_DEADLINE.

        >>> thread = api.streamed_list_objects_with_http_info(body)

        :param body: (required)
        :type body: ListObjectsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StreamResultOfStreamedListObjectsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = ["body"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method streamed_list_objects"
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'body' is set
        if (
            self.api_client.client_side_validation
            and local_var_params.get("body") is None
        ):
            raise ApiValueError(
                "Missing the required parameter `body` when calling `streamed_list_objects`"
            )

        collection_formats = {}

        path_params = {}

        store_id = None

        if self.api_client._get_store_id() is None:
            raise ApiValueError(
                "Store ID expected in api_client's configuration when calling `streamed_list_objects`"
            )
        store_id = self.api_client._get_store_id()

        query_params = []

        header_params = dict(local_var_params.get("_headers", {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in local_var_params:
            body_params = local_var_params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                ["application/json"], "POST", body_params
            ),
        )
        if content_types_list:
            header_params["Content-Type"] = content_types_list

        # Authentication setting
        auth_settings = []

        response_types_map = {
            200: "StreamResultOfStreamedListObjectsResponse",
            400: "ValidationErrorMessageResponse",
            401: "UnauthenticatedResponse",
            403: "ForbiddenResponse",
            404: "PathUnknownErrorMessageResponse",
            409: "AbortedMessageResponse",
            422: "UnprocessableContentMessageResponse",
            500: "InternalErrorMessageResponse",
        }

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "streamed_list_objects",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return await self.api_client.call_api(
            "/stores/{store_id}/streamed-list-objects".replace("{store_id}", store_id),
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get("_return_http_data_only"),
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            _retry_params=local_var_params.get("_retry_params"),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get("_request_auth"),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )

    async def write(self, body, **kwargs):
        """Add or delete tuples from the store

        The Write API will transactionally update the tuples for a certain store. Tuples and type definitions allow OpenFGA to determine whether a relationship exists between an object and an user. In the body, `writes` adds new tuples and `deletes` removes existing tuples. When deleting a tuple, any `condition` specified with it is ignored. The API is not idempotent: if, later on, you try to add the same tuple key (even if the `condition` is different), or if you try to delete a non-existing tuple, it will throw an error. The API will not allow you to write tuples such as `document:2021-budget#viewer@document:2021-budget#viewer`, because they are implicit. An `authorization_model_id` may be specified in the body. If it is, it will be used to assert that each written tuple (not deleted) is valid for the model specified. If it is not specified, the latest authorization model ID will be used. ## Example ### Adding relationships To add `user:anne` as a `writer` for `document:2021-budget`, call write API with the following  ```json {   \"writes\": {     \"tuple_keys\": [       {         \"user\": \"user:anne\",         \"relation\": \"writer\",         \"object\": \"document:2021-budget\"       }     ]   },   \"authorization_model_id\": \"01G50QVV17PECNVAHX1GG4Y5NC\" } ``` ### Removing relationships To remove `user:bob` as a `reader` for `document:2021-budget`, call write API with the following  ```json {   \"deletes\": {     \"tuple_keys\": [       {         \"user\": \"user:bob\",         \"relation\": \"reader\",         \"object\": \"document:2021-budget\"       }     ]   } } ```

        >>> thread = await api.write(body)

        :param body: (required)
        :type body: WriteRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        return await self.write_with_http_info(body, **kwargs)

    async def write_with_http_info(self, body, **kwargs):
        """Add or delete tuples from the store

        The Write API will transactionally update the tuples for a certain store. Tuples and type definitions allow OpenFGA to determine whether a relationship exists between an object and an user. In the body, `writes` adds new tuples and `deletes` removes existing tuples. When deleting a tuple, any `condition` specified with it is ignored. The API is not idempotent: if, later on, you try to add the same tuple key (even if the `condition` is different), or if you try to delete a non-existing tuple, it will throw an error. The API will not allow you to write tuples such as `document:2021-budget#viewer@document:2021-budget#viewer`, because they are implicit. An `authorization_model_id` may be specified in the body. If it is, it will be used to assert that each written tuple (not deleted) is valid for the model specified. If it is not specified, the latest authorization model ID will be used. ## Example ### Adding relationships To add `user:anne` as a `writer` for `document:2021-budget`, call write API with the following  ```json {   \"writes\": {     \"tuple_keys\": [       {         \"user\": \"user:anne\",         \"relation\": \"writer\",         \"object\": \"document:2021-budget\"       }     ]   },   \"authorization_model_id\": \"01G50QVV17PECNVAHX1GG4Y5NC\" } ``` ### Removing relationships To remove `user:bob` as a `reader` for `document:2021-budget`, call write API with the following  ```json {   \"deletes\": {     \"tuple_keys\": [       {         \"user\": \"user:bob\",         \"relation\": \"reader\",         \"object\": \"document:2021-budget\"       }     ]   } } ```

        >>> thread = api.write_with_http_info(body)

        :param body: (required)
        :type body: WriteRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = ["body"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method write"
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'body' is set
        if (
            self.api_client.client_side_validation
            and local_var_params.get("body") is None
        ):
            raise ApiValueError(
                "Missing the required parameter `body` when calling `write`"
            )

        collection_formats = {}

        path_params = {}

        store_id = None

        if self.api_client._get_store_id() is None:
            raise ApiValueError(
                "Store ID expected in api_client's configuration when calling `write`"
            )
        store_id = self.api_client._get_store_id()

        query_params = []

        header_params = dict(local_var_params.get("_headers", {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in local_var_params:
            body_params = local_var_params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                ["application/json"], "POST", body_params
            ),
        )
        if content_types_list:
            header_params["Content-Type"] = content_types_list

        # Authentication setting
        auth_settings = []

        response_types_map = {
            200: "object",
            400: "ValidationErrorMessageResponse",
            401: "UnauthenticatedResponse",
            403: "ForbiddenResponse",
            404: "PathUnknownErrorMessageResponse",
            409: "AbortedMessageResponse",
            422: "UnprocessableContentMessageResponse",
            500: "InternalErrorMessageResponse",
        }

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "write",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return await self.api_client.call_api(
            "/stores/{store_id}/write".replace("{store_id}", store_id),
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get("_return_http_data_only"),
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            _retry_params=local_var_params.get("_retry_params"),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get("_request_auth"),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )

    async def write_assertions(self, authorization_model_id, body, **kwargs):
        """Upsert assertions for an authorization model ID

        The WriteAssertions API will upsert new assertions for an authorization model id, or overwrite the existing ones. An assertion is an object that contains a tuple key, the expectation of whether a call to the Check API of that tuple key will return true or false, and optionally a list of contextual tuples.

        >>> thread = await api.write_assertions(authorization_model_id, body)

        :param authorization_model_id: (required)
        :type authorization_model_id: str
        :param body: (required)
        :type body: WriteAssertionsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        return await self.write_assertions_with_http_info(
            authorization_model_id, body, **kwargs
        )

    async def write_assertions_with_http_info(
        self, authorization_model_id, body, **kwargs
    ):
        """Upsert assertions for an authorization model ID

        The WriteAssertions API will upsert new assertions for an authorization model id, or overwrite the existing ones. An assertion is an object that contains a tuple key, the expectation of whether a call to the Check API of that tuple key will return true or false, and optionally a list of contextual tuples.

        >>> thread = api.write_assertions_with_http_info(authorization_model_id, body)

        :param authorization_model_id: (required)
        :type authorization_model_id: str
        :param body: (required)
        :type body: WriteAssertionsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = ["authorization_model_id", "body"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method write_assertions"
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'authorization_model_id' is set
        if (
            self.api_client.client_side_validation
            and local_var_params.get("authorization_model_id") is None
        ):
            raise ApiValueError(
                "Missing the required parameter `authorization_model_id` when calling `write_assertions`"
            )
        # verify the required parameter 'body' is set
        if (
            self.api_client.client_side_validation
            and local_var_params.get("body") is None
        ):
            raise ApiValueError(
                "Missing the required parameter `body` when calling `write_assertions`"
            )

        collection_formats = {}

        path_params = {}

        store_id = None

        if self.api_client._get_store_id() is None:
            raise ApiValueError(
                "Store ID expected in api_client's configuration when calling `write_assertions`"
            )
        store_id = self.api_client._get_store_id()

        if "authorization_model_id" in local_var_params:
            path_params["authorization_model_id"] = local_var_params[
                "authorization_model_id"
            ]

        query_params = []

        header_params = dict(local_var_params.get("_headers", {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in local_var_params:
            body_params = local_var_params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                ["application/json"], "PUT", body_params
            ),
        )
        if content_types_list:
            header_params["Content-Type"] = content_types_list

        # Authentication setting
        auth_settings = []

        response_types_map = {}

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "write_assertions",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return await self.api_client.call_api(
            "/stores/{store_id}/assertions/{authorization_model_id}".replace(
                "{store_id}", store_id
            ),
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get("_return_http_data_only"),
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            _retry_params=local_var_params.get("_retry_params"),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get("_request_auth"),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )

    async def write_authorization_model(self, body, **kwargs):
        """Create a new authorization model

        The WriteAuthorizationModel API will add a new authorization model to a store. Each item in the `type_definitions` array is a type definition as specified in the field `type_definition`. The response will return the authorization model's ID in the `id` field.  ## Example To add an authorization model with `user` and `document` type definitions, call POST authorization-models API with the body:  ```json {   \"type_definitions\":[     {       \"type\":\"user\"     },     {       \"type\":\"document\",       \"relations\":{         \"reader\":{           \"union\":{             \"child\":[               {                 \"this\":{}               },               {                 \"computedUserset\":{                   \"object\":\"\",                   \"relation\":\"writer\"                 }               }             ]           }         },         \"writer\":{           \"this\":{}         }       }     }   ] } ``` OpenFGA's response will include the version id for this authorization model, which will look like  ``` {\"authorization_model_id\": \"01G50QVV17PECNVAHX1GG4Y5NC\"} ```

        >>> thread = await api.write_authorization_model(body)

        :param body: (required)
        :type body: WriteAuthorizationModelRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WriteAuthorizationModelResponse
        """
        kwargs["_return_http_data_only"] = True
        return await self.write_authorization_model_with_http_info(body, **kwargs)

    async def write_authorization_model_with_http_info(self, body, **kwargs):
        """Create a new authorization model

        The WriteAuthorizationModel API will add a new authorization model to a store. Each item in the `type_definitions` array is a type definition as specified in the field `type_definition`. The response will return the authorization model's ID in the `id` field.  ## Example To add an authorization model with `user` and `document` type definitions, call POST authorization-models API with the body:  ```json {   \"type_definitions\":[     {       \"type\":\"user\"     },     {       \"type\":\"document\",       \"relations\":{         \"reader\":{           \"union\":{             \"child\":[               {                 \"this\":{}               },               {                 \"computedUserset\":{                   \"object\":\"\",                   \"relation\":\"writer\"                 }               }             ]           }         },         \"writer\":{           \"this\":{}         }       }     }   ] } ``` OpenFGA's response will include the version id for this authorization model, which will look like  ``` {\"authorization_model_id\": \"01G50QVV17PECNVAHX1GG4Y5NC\"} ```

        >>> thread = api.write_authorization_model_with_http_info(body)

        :param body: (required)
        :type body: WriteAuthorizationModelRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WriteAuthorizationModelResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = ["body"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method write_authorization_model"
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'body' is set
        if (
            self.api_client.client_side_validation
            and local_var_params.get("body") is None
        ):
            raise ApiValueError(
                "Missing the required parameter `body` when calling `write_authorization_model`"
            )

        collection_formats = {}

        path_params = {}

        store_id = None

        if self.api_client._get_store_id() is None:
            raise ApiValueError(
                "Store ID expected in api_client's configuration when calling `write_authorization_model`"
            )
        store_id = self.api_client._get_store_id()

        query_params = []

        header_params = dict(local_var_params.get("_headers", {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in local_var_params:
            body_params = local_var_params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                ["application/json"], "POST", body_params
            ),
        )
        if content_types_list:
            header_params["Content-Type"] = content_types_list

        # Authentication setting
        auth_settings = []

        response_types_map = {
            201: "WriteAuthorizationModelResponse",
            400: "ValidationErrorMessageResponse",
            401: "UnauthenticatedResponse",
            403: "ForbiddenResponse",
            404: "PathUnknownErrorMessageResponse",
            409: "AbortedMessageResponse",
            422: "UnprocessableContentMessageResponse",
            500: "InternalErrorMessageResponse",
        }

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "write_authorization_model",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return await self.api_client.call_api(
            "/stores/{store_id}/authorization-models".replace("{store_id}", store_id),
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get("_return_http_data_only"),
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            _retry_params=local_var_params.get("_retry_params"),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get("_request_auth"),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )
